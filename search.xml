<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>express的使用</title>
      <link href="/2022/061715266.html"/>
      <url>/2022/061715266.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax总结</title>
      <link href="/2022/061644042.html"/>
      <url>/2022/061644042.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-ajax"><a href="#1-ajax" class="headerlink" title="1.ajax"></a>1.ajax</h2><h3 id="1-什么是Ajax"><a href="#1-什么是Ajax" class="headerlink" title="1.什么是Ajax"></a>1.什么是Ajax</h3><p>Ajax 的全称是 Asynchronous Javascript And XML（异步 JavaScript 和 XML）。通俗的理解：在网页中利用 XMLHttpRequest 对象和服务器进行数据交互的方式，就是Ajax。</p><h3 id="2-了解jQuery中的Ajax"><a href="#2-了解jQuery中的Ajax" class="headerlink" title="2.了解jQuery中的Ajax"></a>2.了解jQuery中的Ajax</h3><p>浏览器中提供的 XMLHttpRequest 用法比较复杂，所以 jQuery 对 XMLHttpRequest 进行了封装，提供了一系列 Ajax 相关的函数，极大地降低了 Ajax 的使用难度。jQuery 中发起 Ajax 请求最常用的三个方法如下：</p><ul><li><code>$.get()</code> </li><li><code>$.post()</code></li><li><code>$.ajax()</code></li></ul><h3 id="3-get-函数的语法"><a href="#3-get-函数的语法" class="headerlink" title="3.$.get()函数的语法"></a>3.$.get()函数的语法</h3><p>jQuery 中 $.get() 函数的功能单一，专门用来发起 get 请求，从而将服务器上的资源请求到客户端来进行使用。$.get() 函数的语法如下：</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，三个参数各自代表的含义如下：</p><table><thead><tr><th><strong>参数名</strong></th><th><strong>参数类型</strong></th><th><strong>是否必选</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>url</code></td><td><code>string</code></td><td><code>是</code></td><td>要请求的<code>资源地址</code></td></tr><tr><td>data</td><td>object</td><td>否</td><td>请求资源期间要<code>携带的参数</code></td></tr><tr><td>callback</td><td>function</td><td>否</td><td>请求成功时的<code>回调函数</code></td></tr></tbody></table><h3 id="4-get-发起不带参数的请求"><a href="#4-get-发起不带参数的请求" class="headerlink" title="4.$.get()发起不带参数的请求"></a>4.$.get()发起不带参数的请求</h3><p>使用 $.get() 函数发起不带参数的请求时，直接提供请求的 URL 地址和请求成功之后的回调函数即可，示例代码如下</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://www.liulongbin.top:3006/api/getbooks'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这里的 res 是服务器返回的数据</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/06/16/8XDrajyFdMWiwgR.png" alt="image-20220616204601672"></p><h3 id="5-post-函数的语法"><a href="#5-post-函数的语法" class="headerlink" title="5.$.post()函数的语法"></a>5.$.post()函数的语法</h3><p>jQuery 中 $.post() 函数的功能单一，专门用来发起 post 请求，从而向服务器提交数据。$.post() 函数的语法如下：</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，三个参数各自代表的含义如下：</p><table><thead><tr><th><strong>参数名</strong></th><th><strong>参数类型</strong></th><th><strong>是否必选</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>url</td><td><code>string</code></td><td><code>是</code></td><td>提交<code>数据的地址</code></td></tr><tr><td>data</td><td>object</td><td>否</td><td>要提交的数据</td></tr><tr><td>callback</td><td>function</td><td>否</td><td>数据提交成功时的<code>回调函数</code></td></tr></tbody></table><h3 id="6-post-向服务器提交数据"><a href="#6-post-向服务器提交数据" class="headerlink" title="6.$.post()向服务器提交数据"></a>6.$.post()向服务器提交数据</h3><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>   <span class="token string">'http://www.liulongbin.top:3006/api/addbook'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 请求的URL地址</span>   <span class="token punctuation">{</span> bookname<span class="token punctuation">:</span> <span class="token string">'水浒传'</span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string">'施耐庵'</span><span class="token punctuation">,</span> publisher<span class="token punctuation">:</span> <span class="token string">'上海图书出版社'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 提交的数据</span>   <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 回调函数</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/06/16/2ebkJoWAYwCTFnP.png" alt="image-20220616204845012"></p><h3 id="7-ajax-函数的语法"><a href="#7-ajax-函数的语法" class="headerlink" title="7.$.ajax()函数的语法"></a>7.$.ajax()函数的语法</h3><p>相比于 $.get() 和 $.post() 函数，jQuery 中提供的 $.ajax() 函数，是一个功能比较综合的函数，它允许我们对 Ajax 请求进行更详细的配置。</p><p>$.ajax() 函数的基本语法如下：</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   type<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 请求的方式，例如 GET 或 POST</span>   url<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 请求的 URL 地址</span>   data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 这次请求要携带的数据</span>   success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 请求成功之后的回调函数</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-使用-ajax-发起GET请求"><a href="#8-使用-ajax-发起GET请求" class="headerlink" title="8.使用$.ajax()发起GET请求"></a>8.使用$.ajax()发起GET请求</h3><p>使用 $.ajax() 发起 GET 请求时，只需要将 type 属性的值设置为 ‘GET’ 即可：</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   type<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 请求的方式</span>   url<span class="token punctuation">:</span> <span class="token string">'http://www.liulongbin.top:3006/api/getbooks'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 请求的 URL 地址</span>   data<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 这次请求要携带的数据</span>   success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 请求成功之后的回调函数</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-使用-ajax-发起POST请求"><a href="#9-使用-ajax-发起POST请求" class="headerlink" title="9.使用$.ajax()发起POST请求"></a>9.使用$.ajax()发起POST请求</h3><p>使用 $.ajax() 发起 POST 请求时，只需要将 type 属性的值设置为 ‘POST’ 即可：</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   type<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 请求的方式</span>   url<span class="token punctuation">:</span> <span class="token string">'http://www.liulongbin.top:3006/api/addbook'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 请求的 URL 地址</span>   data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 要提交给服务器的数据</span>      bookname<span class="token punctuation">:</span> <span class="token string">'水浒传'</span><span class="token punctuation">,</span>      author<span class="token punctuation">:</span> <span class="token string">'施耐庵'</span><span class="token punctuation">,</span>      publisher<span class="token punctuation">:</span> <span class="token string">'上海图书出版社'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>   success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 请求成功之后的回调函数</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-接口"><a href="#2-接口" class="headerlink" title="2.接口"></a>2.接口</h2><h3 id="2-1接口的概念"><a href="#2-1接口的概念" class="headerlink" title="2.1接口的概念"></a>2.1接口的概念</h3><p>使用 Ajax 请求数据时，被请求的 URL 地址，就叫做数据接口（简称接口）。同时，每个接口必须有请求方式。例如：</p><p><a href="http://www.liulongbin.top:3006/api/getbooks">http://www.liulongbin.top:3006/api/getbooks</a>  获取图书列表的接口(GET请求)</p><p><a href="http://www.liulongbin.top:3006/api/addbook">http://www.liulongbin.top:3006/api/addbook</a>   添加图书的接口（POST请求）</p><h3 id="2-2分析接口的请求过程"><a href="#2-2分析接口的请求过程" class="headerlink" title="2.2分析接口的请求过程"></a>2.2分析接口的请求过程</h3><p>1.通过GET方式请求接口的过程</p><p><img src="https://s2.loli.net/2022/06/16/HixNM8uCKoe7Sqb.png" alt="image-20220616205325474"></p><ol start="2"><li><p>通过POST方式请求接口的过程</p><p><img src="https://s2.loli.net/2022/06/16/EcAj1aOIqHY8LDC.png" alt="image-20220616205426810"></p></li></ol><p>案列：</p><p><img src="https://s2.loli.net/2022/06/16/DYZwEC4M7kUHBJK.png" alt="image-20220616205553626"></p><p>代码：</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获取图书列表数据</span>      <span class="token keyword">function</span> <span class="token function">getBookList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://www.liulongbin.top:3006/api/getbooks'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'获取数据失败！'</span><span class="token punctuation">)</span>          <span class="token keyword">var</span> rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            rows<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&lt;tr>&lt;td>'</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">'&lt;/td>&lt;td>'</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>bookname <span class="token operator">+</span> <span class="token string">'&lt;/td>&lt;td>'</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>author <span class="token operator">+</span> <span class="token string">'&lt;/td>&lt;td>'</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>publisher <span class="token operator">+</span> <span class="token string">'&lt;/td>&lt;td>&lt;a href="javascript:;" class="del" data-id="'</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">'">删除&lt;/a>&lt;/td>&lt;/tr>'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#tb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>rows<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token function">getBookList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">/* $('.del').on('click', function () {        console.log('ok')      }) */</span>      <span class="token comment" spellcheck="true">// 通过代理的方式为动态添加的元素绑定点击事件</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'tbody'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'.del'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'data-id'</span><span class="token punctuation">)</span>        $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://www.liulongbin.top:3006/api/delbook'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> id <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'删除图书失败！'</span><span class="token punctuation">)</span>          <span class="token function">getBookList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btnAdd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> bookname <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#iptBookname'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> author <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#iptAuthor'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> publisher <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#iptPublisher'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bookname<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> author<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> publisher<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请填写完整的图书信息！'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://www.liulongbin.top:3006/api/addbook'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> bookname<span class="token punctuation">:</span> bookname<span class="token punctuation">,</span> author<span class="token punctuation">:</span> author<span class="token punctuation">,</span> publisher<span class="token punctuation">:</span> publisher <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token number">201</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'添加图书失败！'</span><span class="token punctuation">)</span>          <span class="token function">getBookList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#iptBookname'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#iptAuthor'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#iptPublisher'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-form表单与模板引擎"><a href="#3-form表单与模板引擎" class="headerlink" title="3.form表单与模板引擎"></a>3.form表单与模板引擎</h2><h3 id="1-表单在网页中主要负责数据采集功能。"><a href="#1-表单在网页中主要负责数据采集功能。" class="headerlink" title="1.表单在网页中主要负责数据采集功能。"></a>1.表单在网页中主要负责数据采集功能。</h3><p>HTML中的<form>标签，就是用于采集用户输入的信息，并通过<form>标签的提交操作，把采集到的信息提交到服务器端进行处理。</p><h3 id="2-标签的属性"><a href="#2-标签的属性" class="headerlink" title="2.标签的属性"></a>2.<form>标签的属性</h3><pre class="line-numbers language-tex"><code class="language-tex"><form>标签用来采集数据，<form>标签的属性则是用来规定如何把采集到的数据发送到服务器。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th><strong>属性</strong></th><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>action</td><td>URL地址</td><td>规定当提交表单时，向何处发送表单数据</td></tr><tr><td>method</td><td>get或post</td><td>规定以何种方式把表单数据提交到 action URL</td></tr><tr><td>enctype</td><td>application&#x2F;x-www-form-urlencodedmultipart&#x2F;form-datatext&#x2F;plain</td><td>规定在发送表单数据之前如何对其进行编码</td></tr><tr><td>target</td><td>_blank_self_parent_top<em>framename</em></td><td>规定在何处打开 action URL</td></tr></tbody></table><p>1.action</p><ul><li>action 属性用来规定当提交表单时，<code>向何处发送表单数据。</code></li><li>action 属性的值应该是后端提供的一个 URL 地址，这个 URL 地址专门负责接收表单提交过来的数据。</li><li>当 <form> 表单在未指定 action 属性值的情况下，action 的默认值为当前页面的 URL 地址。</li><li><code>注意</code>：当提交表单后，页面会立即跳转到 action 属性指定的 URL 地址</li></ul><p>2.target</p><ul><li>target 属性用来规定在何处打开 action URL。</li><li>它的可选值有5个，默认情况下，target 的值是 _self，表示在相同的框架中打开 action URL。</li></ul><table><thead><tr><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>_blank</td><td>在新窗口中打开。</td></tr><tr><td>_self</td><td>默认。在相同的框架中打开。</td></tr><tr><td>_parent</td><td>在父框架集中打开。（很少用）</td></tr><tr><td>_top</td><td>在整个窗口中打开。（很少用）</td></tr><tr><td><em>framename</em></td><td>在指定的框架中打开。（很少用）</td></tr></tbody></table><p>3.method</p><p>method 属性用来规定以何种方式把表单数据提交到 action URL。</p><p>它的可选值有两个，分别是 get 和 post。</p><p>默认情况下，method 的值为 get，表示通过URL地址的形式，把表单数据提交到 action URL。</p><p>注意：get 方式适合用来提交少量的、简单的数据。</p><p>post 方式适合用来提交大量的、复杂的、或包含文件上传的数据。</p><p>在实际开发中，<form> 表单的 post 提交方式用的最多，很少用 get。例如登录、注册、添加数据等表单操作，都需要使用 post 方式来提交表单。</p><p>4.enctype</p><p>enctype 属性用来规定在发送表单数据之前如何对数据进行编码。</p><p>它的可选值有三个，默认情况下，enctype 的值为 application&#x2F;x-www-form-urlencoded，表示在发送前编码所有的字符。</p><table><thead><tr><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>application&#x2F;x-www-form-urlencoded</td><td>在发送前编码所有字符（默认）</td></tr><tr><td>multipart&#x2F;form-data</td><td>不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。</td></tr><tr><td>text&#x2F;plain</td><td>空格转换为 “+” 加号，但不对特殊字符编码。（很少用）</td></tr></tbody></table><p><code>注意：</code></p><p>在涉及到<code>文件上传</code>的操作时，<code>必须</code>将 enctype 的值设置为 <code>multipart/form-data</code></p><p>如果表单的提交不涉及到文件上传操作，则直接将 enctype 的值设置为 application&#x2F;x-www-form-urlencoded 即可！</p><h3 id="3-通过Ajax提交表单数据"><a href="#3-通过Ajax提交表单数据" class="headerlink" title="3.通过Ajax提交表单数据"></a>3.通过Ajax提交表单数据</h3><p>1.监听表单提交事件</p><p>在 jQuery 中，可以使用如下两种方式，监听到表单的提交事件：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#form1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'监听到了表单的提交事件'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#form1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'监听到了表单的提交事件'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.阻止表单默认提交行为</p><p>当监听到表单的提交事件以后，可以调用事件对象的 event.preventDefault() 函数，来阻止表单的提交和页面的跳转，示例代码如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#form1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 阻止表单的提交和页面的跳转</span>   e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#form1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 阻止表单的提交和页面的跳转</span>   e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.快速获取表单中的数据</p><p>3.1 serialize()函数</p><p>为了简化表单中数据的获取操作，jQuery 提供了 serialize() 函数，其语法格式如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>serialize() 函数的好处：可以一次性获取到表单中的所有的数据。</p><p>3.2serialize()函数示例</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#form1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 调用的结果：</span><span class="token comment" spellcheck="true">// username=用户名的值&amp;password=密码的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：在使用 serialize() 函数快速获取表单数据时，<code>必须为每个表单元素添加</code> <code>name 属性！</code></p><h3 id="4-模板引擎的基本概念"><a href="#4-模板引擎的基本概念" class="headerlink" title="4.模板引擎的基本概念"></a>4.模板引擎的基本概念</h3><p>4.1 渲染UI结构时遇到的问题</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 循环拼接字符串</span>    rows<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&lt;li class="list-group-item">'</span><span class="token operator">+</span> item<span class="token punctuation">.</span>content <span class="token operator">+</span><span class="token string">'&lt;span class="badge cmt-date">评论时间：'</span><span class="token operator">+</span> item<span class="token punctuation">.</span>time <span class="token operator">+</span><span class="token string">'&lt;/span>&lt;span class="badge cmt-person">评论人：'</span><span class="token operator">+</span> item<span class="token punctuation">.</span>username <span class="token operator">+</span><span class="token string">'&lt;/span>&lt;/li>'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#cmt-list'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>rows<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 渲染列表的UI结构</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码是通过字符串拼接的形式，来渲染UI结构。如果UI结构比较复杂，则拼接字符串的时候需要格外注意引号之前的嵌套。且一旦需求发生变化，修改起来也非常麻烦。</p><p>4.2什么是模板引擎</p><p>模板引擎，顾名思义，它可以根据程序员指定的模板结构和数据，自动生成一个完整的HTML页面。</p><p><img src="https://s2.loli.net/2022/06/16/Uudx5DeSJCVga3K.png" alt="image-20220616211410339"></p><p>4.3 模板引擎的好处</p><ol><li>减少了字符串的拼接操作</li><li>使代码结构更清晰</li><li>使代码更易于阅读与维护</li></ol><h2 id="4-Ajax加强"><a href="#4-Ajax加强" class="headerlink" title="4.Ajax加强"></a>4.Ajax加强</h2><h3 id="1-XMLHttpRequest的基本使用"><a href="#1-XMLHttpRequest的基本使用" class="headerlink" title="1.XMLHttpRequest的基本使用"></a>1.XMLHttpRequest的基本使用</h3><p>1.什么XMLHttpRequest</p><p>XMLHttpRequest（简称 xhr）是浏览器提供的 Javascript 对象，通过它，可以请求服务器上的数据资源。之前所学的 jQuery 中的 Ajax 函数，就是基于 xhr 对象封装出来的。</p><p><img src="https://s2.loli.net/2022/06/16/FL1KfR9eO4HNWQv.png" alt="image-20220616213956956"></p><p>2.使用xhr发起GET请求</p><p>步骤：</p><ol><li>创建 xhr 对象</li><li>调用 xhr.open() 函数</li><li>调用 xhr.send() 函数</li><li>监听 xhr.onreadystatechange 事件</li></ol><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 1. 创建 XHR 对象</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2. 调用 open 函数</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'http://www.liulongbin.top:3006/api/getbooks'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 3. 调用 send 函数</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 4. 监听 onreadystatechange 事件</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取服务器响应的数据</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.了解xhr对象的readyState属性</p><p>XMLHttpRequest 对象的 readyState 属性，用来表示当前 Ajax 请求所处的状态。每个 Ajax 请求必然处于以下状态中的一个：</p><table><thead><tr><th><strong>值</strong></th><th><strong>状态</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>0</td><td>UNSENT</td><td>XMLHttpRequest 对象已被创建，但尚未调用 open方法。</td></tr><tr><td>1</td><td>OPENED</td><td>open() 方法已经被调用。</td></tr><tr><td>2</td><td>HEADERS_RECEIVED</td><td>send() 方法已经被调用，响应头也已经被接收。</td></tr><tr><td>3</td><td>LOADING</td><td>数据接收中，此时 response 属性中已经包含部分数据。</td></tr><tr><td>4</td><td>DONE</td><td>Ajax 请求完成，这意味着数据传输已经彻底完成或失败。</td></tr></tbody></table><p>4.使用xhr发起带参数的GET请求</p><p>使用 xhr 对象发起带参数的 GET 请求时，只需在调用 xhr.open 期间，为 URL 地址指定参数即可：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ...省略不必要的代码</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'http://www.liulongbin.top:3006/api/getbooks?id=1'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ...省略不必要的代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种在 URL 地址后面拼接的参数，叫做查询字符串。</p><p>5.查询字符串</p><p>定义：查询字符串（URL 参数）是指在 URL 的末尾加上用于向服务器发送信息的字符串（变量）。</p><p>格式：将英文的 ? 放在URL 的末尾，然后再加上 参数＝值 ，想加上多个参数的话，使用 &amp; 符号进行分隔。以这个形式，可以将想要发送给服务器的数据添加到 URL 中。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 不带参数的 URL 地址</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>liulongbin<span class="token punctuation">.</span>top<span class="token punctuation">:</span><span class="token number">3006</span><span class="token operator">/</span>api<span class="token operator">/</span>getbooks<span class="token comment" spellcheck="true">// 带一个参数的 URL 地址</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>liulongbin<span class="token punctuation">.</span>top<span class="token punctuation">:</span><span class="token number">3006</span><span class="token operator">/</span>api<span class="token operator">/</span>getbooks<span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">// 带两个参数的 URL 地址</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>liulongbin<span class="token punctuation">.</span>top<span class="token punctuation">:</span><span class="token number">3006</span><span class="token operator">/</span>api<span class="token operator">/</span>getbooks<span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>bookname<span class="token operator">=</span>西游记<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.2 GET请求携带参数的本质</p><p>无论使用 $.ajax()，还是使用 $.get()，又或者直接使用 xhr 对象发起 GET 请求，当需要携带参数的时候，本质上，都是直接将参数以查询字符串的形式，追加到 URL 地址的后面，发送到服务器的。</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 等价于</span>$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url?name=zs&amp;age=20'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> <span class="token string">'url'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span> success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 等价于</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> <span class="token string">'url?name=zs&amp;age=20'</span><span class="token punctuation">,</span> success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.如何对URL进行编码与解码</p><p>浏览器提供了 URL 编码与解码的 API，分别是：</p><ul><li>encodeURI()  编码的函数</li><li>decodeURI()  解码的函数</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token function">encodeURI</span><span class="token punctuation">(</span><span class="token string">'黑马程序员'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出字符串  %E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98</span><span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token string">'%E9%BB%91%E9%A9%AC'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出字符串  黑马</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>7.使用xhr发起POST请求</p><p>步骤：</p><ol><li>创建 xhr 对象</li><li>调用 xhr.open() 函数</li><li>设置 Content-Type 属性（固定写法）</li><li>调用 xhr.send() 函数，同时指定要发送的数据</li><li>监听 xhr.onreadystatechange 事件</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 创建 xhr 对象</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 调用 open()</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'http://www.liulongbin.top:3006/api/addbook'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. 设置 Content-Type 属性（固定写法）</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4. 调用 send()，同时将数据以查询字符串的形式，提交给服务器</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'bookname=水浒传&amp;author=施耐庵&amp;publisher=天津图书出版社'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 5. 监听 onreadystatechange 事件</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token function"> </span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数据交换格式"><a href="#2-数据交换格式" class="headerlink" title="2.数据交换格式"></a>2.数据交换格式</h3><p>数据交换格式，就是服务器端与客户端之间进行数据传输与交换的格式。前端领域，经常提及的两种数据交换格式分别是 XML 和 JSON。其中 XML 用的非常少，所以，我们重点要学习的数据交换格式就是 JSON。</p><p>1.什么是XML</p><p>XML 的英文全称是 EXtensible Markup Language，即可扩展标记语言。因此，XML 和 HTML 类似，也是一种标记语言。</p><p><img src="https://s2.loli.net/2022/06/16/VNl1oJmXn2Y8wUL.png" alt="image-20220616215105552"></p><p>2.XML和HTML的区别</p><p>XML 和 HTML 虽然都是标记语言，但是，它们两者之间没有任何的关系。</p><p>HTML 被设计用来描述网页上的内容，是网页内容的载体</p><p>XML 被设计用来传输和存储数据，是数据的载体</p><p><img src="https://s2.loli.net/2022/06/16/C3cNXhornFi2du9.png" alt="image-20220616215150435"></p><p><img src="C:\Users\zhou\AppData\Roaming\Typora\typora-user-images\image-20220616215216385.png" alt="image-20220616215216385"></p><p>3.JSON</p><p>3.1什么是JSON</p><p>概念：JSON 的英文全称是 JavaScript Object Notation，即“JavaScript 对象表示法”。简单来讲，JSON 就是 Javascript 对象和数组的字符串表示法，它使用文本表示一个 JS 对象或数组的信息，因此，JSON 的本质是字符串。作用：JSON 是一种轻量级的文本数据交换格式，在作用上类似于 XML，专门用于存储和传输数据，但是 JSON 比 XML 更小、更快、更易解析。现状：JSON 是在 2001 年开始被推广和使用的数据格式，到现今为止，JSON 已经成为了主流的数据交换格式。</p><p>3.2 JSON的两种结构</p><p>JSON 就是用字符串来表示 Javascript 的对象和数组。所以，JSON 中包含对象和数组两种结构，通过这两种结构的相互嵌套，可以表示各种复杂的数据结构。</p><p>对象结构：对象结构在 JSON 中表示为 { } 括起来的内容。数据结构为 { key: value, key: value, … } 的键值对结构。其中，key 必须是使用英文的双引号包裹的字符串，value 的数据类型可以是数字、字符串、布尔值、null、数组、对象6种类型。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"zs"</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>    <span class="token string">"address"</span><span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>    <span class="token string">"hobby"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"吃饭"</span><span class="token punctuation">,</span> <span class="token string">"睡觉"</span><span class="token punctuation">,</span> <span class="token string">'打豆豆'</span><span class="token punctuation">]</span>    say<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"zs"</span><span class="token punctuation">,</span>    <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>    <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token string">"hobby"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"吃饭"</span><span class="token punctuation">,</span> <span class="token string">"睡觉"</span><span class="token punctuation">,</span> <span class="token string">"打豆豆"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组结构：数组结构在 JSON 中表示为 [ ] 括起来的内容。数据结构为 [ “java”, “javascript”, 30, true … ] 。数组中数据的类型可以是数字、字符串、布尔值、null、数组、对象6种类型。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span> <span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"php"</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300.5</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"zs"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"ls"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token string">"苹果"</span><span class="token punctuation">,</span> <span class="token string">"榴莲"</span><span class="token punctuation">,</span> <span class="token string">"椰子"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.3JSON语法注意事项</p><ol><li>属性名必须使用双引号包裹</li><li>字符串类型的值必须使用双引号包裹JSON中不允许使用单引号表示字符串</li><li>JSON中不能写注释</li><li>JSON的最外层必须是对象或数组格式</li><li>不能使用undefined或函数作为JSON的值</li><li><code>JSON的作用:</code>在计算机与网络之间存储和传输数据。</li><li><code>JSON的本质</code>:用字符串来表示Javascript对象数据或数组数据</li></ol><p>3.4JSON和JS对象的关系</p><p>JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。例如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//这是一个对象</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token string">'World'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这是一个 JSON 字符串，本质是一个字符串</span><span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token string">'{"a": "Hello", "b": "World"}'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.5JSON和JS对象的互转</p><p>要实现从 JSON 字符串转换为 JS 对象，使用 JSON.parse() 方法：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'{"a": "Hello", "b": "World"}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//结果是 {a: 'Hello', b: 'World'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要实现从 JS 对象转换为 JSON 字符串，使用 JSON.stringify() 方法：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token string">'World'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//结果是 '{"a": "Hello", "b": "World"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.6序列化和反序列化</p><p>把数据对象转换为字符串的过程，叫做序列化，例如：调用 JSON.stringify() 函数的操作，叫做 <code>JSON 序列化</code>。</p><p>把字符串转换为数据对象的过程，叫做反序列化，例如：调用 JSON.parse() 函数的操作，叫做 <code>JSON 反序列化。</code></p><h3 id="3-封装自己的Ajax函数"><a href="#3-封装自己的Ajax函数" class="headerlink" title="3.封装自己的Ajax函数"></a>3.封装自己的Ajax函数</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1</span><span class="token punctuation">.</span> 导入自定义的ajax函数库 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./itheima.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 2. 调用自定义的 itheima 函数，发起 Ajax 数据请求</span>    <span class="token function">itheima</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        method<span class="token punctuation">:</span> <span class="token string">'请求类型'</span><span class="token punctuation">,</span>        url<span class="token punctuation">:</span> <span class="token string">'请求地址'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 请求参数对象 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 成功的回调函数</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 打印数据</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.定义options参数选项</p><p>itheima()函数是我们自定义的 Ajax函数，它接收一个配置对象作为参数，配置对象中可以配置如下属性:</p><ul><li>method   请求的类型</li><li>url            请求的URL地址</li><li>data         请求携带的数据</li><li>success    请求成功之后的回调函数</li></ul><p>3.处理data参数</p><p>需要把 data 对象，转化成查询字符串的格式，从而提交给服务器，因此提前定义 resolveData 函数如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 处理 data 参数 * @param {data} 需要发送到服务器的数据 * @returns {string} 返回拼接好的查询字符串 name=zs&amp;age=10 */</span><span class="token keyword">function</span><span class="token function"> resolveData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span><span class="token function"> </span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.定义itheima函数</p><p>在 itheima() 函数中，需要创建 xhr 对象，并监听 onreadystatechange 事件：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span><span class="token function"> itheima</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 拼接查询字符串</span>  <span class="token keyword">var</span> qs <span class="token operator">=</span><span class="token function"> resolveData</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 监听请求状态改变的事件</span>  xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token function"> </span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> result <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>      options<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.判断请求的类型</p><p>不同的请求类型，对应 xhr 对象的不同操作，因此需要对请求类型进行 if … else … 的判断：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">if</span><span class="token function"> </span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 发起 GET 请求</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>method<span class="token punctuation">,</span> options<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> qs<span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token function"> </span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 发起 POST 请求</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>method<span class="token punctuation">,</span> options<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>qs<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-XMLHttpRequest-Level2的新特性"><a href="#4-XMLHttpRequest-Level2的新特性" class="headerlink" title="4.XMLHttpRequest Level2的新特性"></a>4.XMLHttpRequest Level2的新特性</h3><p>1.旧版XMLHttpRequest的缺点</p><p>只支持文本数据的传输，无法用来读取和上传文件</p><p>传送和接收数据时，没有进度信息，只能提示有没有完成</p><p>2.XMLHttpRequest Level2的新功能</p><ol><li>可以设置HTTP请求的时限</li><li>可以使用FormData对象管理表单数据可以上传文件</li><li>可以上传文件</li><li>可以获得数据传输的进度信息</li></ol><p>3.设置HTTP请求时限</p><p>有时，Ajax 操作很耗时，而且无法预知要花多少时间。如果网速很慢，用户可能要等很久。新版本的 XMLHttpRequest 对象，增加了 timeout 属性，可以设置 HTTP 请求的时限：</p><pre class="line-numbers language-js"><code class="language-js"> xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">3000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的语句，将最长等待时间设为 3000 毫秒。过了这个时限，就自动停止HTTP请求。与之配套的还有一个 timeout 事件，用来指定回调函数：</p><pre class="line-numbers language-js"><code class="language-js"> xhr<span class="token punctuation">.</span>ontimeout <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请求超时！'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.FormData对象管理表单数据</p><p>Ajax 操作往往用来提交表单数据。为了方便表单处理，HTML5 新增了一个 FormData 对象，可以模拟表单操作：</p><pre class="line-numbers language-js"><code class="language-js">      <span class="token comment" spellcheck="true">// 1. 新建 FormData 对象</span>      <span class="token keyword">var</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 2. 为 FormData 添加表单项</span>      fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'uname'</span><span class="token punctuation">,</span> <span class="token string">'zs'</span><span class="token punctuation">)</span>      fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'upwd'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 3. 创建 XHR 对象</span>      <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 4. 指定请求类型与URL地址</span>      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'http://www.liulongbin.top:3006/api/formdata'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 5. 直接提交 FormData 对象，这与提交网页表单的效果，完全一样</span>      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>FormData对象也可以用来获取网页表单的值，示例代码如下：</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 获取表单元素</span> <span class="token keyword">var</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#form1'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 监听表单元素的 submit 事件</span> form<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 根据 form 表单创建 FormData 对象，会自动将表单数据填充到 FormData 对象中</span>     <span class="token keyword">var</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span>     <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'http://www.liulongbin.top:3006/api/formdata'</span><span class="token punctuation">)</span>     xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span>     xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.上传文件</p><p>新版 XMLHttpRequest 对象，不仅可以发送文本信息，还可以上传文件。</p><p>实现步骤：</p><ol><li>定义U结构</li><li>验证是否选择了文件</li><li>向FormData中追加文件</li><li>使用xhr 发起上传文件的请求</li><li>监听onreadystatechange事件</li></ol><p>1.定义UI结构</p><pre class="line-numbers language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- 1. 文件选择框 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 2. 上传按钮 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnUpload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上传文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 3. 显示上传到服务器上的图片 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.验证是否选择了文件</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 1. 获取上传文件的按钮</span> <span class="token keyword">var</span> btnUpload <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btnUpload'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2. 为按钮添加 click 事件监听</span> btnUpload<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 3. 获取到选择的文件列表</span>     <span class="token keyword">var</span> files <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#file1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files     <span class="token keyword">if</span><span class="token function"> </span><span class="token punctuation">(</span>files<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span><span class="token function"> alert</span><span class="token punctuation">(</span><span class="token string">'请选择要上传的文件！'</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// ...后续业务逻辑</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.向FormData中追加文件</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 1. 创建 FormData 对象</span> <span class="token keyword">var</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2. 向 FormData 中追加文件</span> fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'avatar'</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.使用 xhr 发起上传文件的请求</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 1. 创建 xhr 对象</span> <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2. 调用 open 函数，指定请求类型与URL地址。其中，请求类型必须为 POST</span> xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'http://www.liulongbin.top:3006/api/upload/avatar'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3. 发起请求</span> xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.监听onreadystatechange事件</p><pre class="line-numbers language-js"><code class="language-js">   xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token function"> </span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token function"> </span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 上传文件成功</span>      <span class="token comment" spellcheck="true">// 将服务器返回的图片地址，设置为 &lt;img> 标签的 src 属性</span>      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://www.liulongbin.top:3006'</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>url    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 上传文件失败</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.显示文件上传进度</p><p>新版本的 XMLHttpRequest 对象中，可以通过监听 xhr.upload.onprogress 事件，来获取到文件的上传进度。语法格式如下：</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 创建 XHR 对象</span> <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 监听 xhr.upload 的 onprogress 事件</span> xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span>onprogress <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// e.lengthComputable 是一个布尔值，表示当前上传的资源是否具有可计算的长度</span>    <span class="token keyword">if</span><span class="token function"> </span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// e.loaded 已传输的字节</span>        <span class="token comment" spellcheck="true">// e.total  需传输的总字节</span>        <span class="token keyword">var</span> percentComplete <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>loaded <span class="token operator">/</span> e<span class="token punctuation">.</span>total<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.导入需要的库</p><pre class="line-numbers language-html"><code class="language-html">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./lib/bootstrap.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./lib/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 2.基于Bootstrap渲染进度条</p><pre class="line-numbers language-html"><code class="language-html">       <span class="token comment" spellcheck="true">&lt;!-- 进度条 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>progress<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">0</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>progress-bar progress-bar-info progress-bar-striped active<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>percent<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0%</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        0%      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.监听上传进度的事件</p><pre class="line-numbers language-js"><code class="language-js">    xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span>onprogress <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token function"> </span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 计算出当前上传进度的百分比</span>    <span class="token keyword">var</span> percentComplete <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>loaded <span class="token operator">/</span> e<span class="token punctuation">.</span>total<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#percent'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 2. 设置进度条的宽度</span>        <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">,</span> <span class="token string">'width:'</span> <span class="token operator">+</span> percentComplete <span class="token operator">+</span> <span class="token string">'%'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 3. 显示当前的上传进度百分比</span>        <span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>percentComplete <span class="token operator">+</span> <span class="token string">'%'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>监听上传完成的事件</li></ol><pre class="line-numbers language-js"><code class="language-js">    xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#percent'</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 移除上传中的类样式</span>         <span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 添加上传完成的类样式</span>         <span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'progress-bar progress-bar-success'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-jQuery高级用法"><a href="#5-jQuery高级用法" class="headerlink" title="5 jQuery高级用法"></a>5 jQuery高级用法</h3><p>1.jQuery实现文件上传</p><p>1.1定义UI结构</p><pre class="line-numbers language-html"><code class="language-html">       <span class="token comment" spellcheck="true">&lt;!-- 导入 jQuery --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./lib/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 文件选择框 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 上传文件按钮 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnUpload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.2验证是否选择了文件</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btnUpload'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 1. 将 jQuery 对象转化为 DOM 对象，并获取选中的文件列表</span>     <span class="token keyword">var</span> files <span class="token operator">=</span><span class="token function"> $</span><span class="token punctuation">(</span><span class="token string">'#file1'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>files     <span class="token comment" spellcheck="true">// 2. 判断是否选择了文件</span>     <span class="token keyword">if</span><span class="token function"> </span><span class="token punctuation">(</span>files<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span><span class="token function"> alert</span><span class="token punctuation">(</span>'请选择图片后再上传！‘<span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.3向FormData中追加文件</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 向 FormData 中追加文件</span> <span class="token keyword">var</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'avatar'</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>1.4使用jQuery发起上传文件的请求</p><pre class="line-numbers language-js"><code class="language-js"> $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>     url<span class="token punctuation">:</span> <span class="token string">'http://www.liulongbin.top:3006/api/upload/avatar'</span><span class="token punctuation">,</span>     data<span class="token punctuation">:</span> fd<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 不修改 Content-Type 属性，使用 FormData 默认的 Content-Type 值</span>     contentType<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 不对 FormData 中的数据进行 url 编码，而是将 FormData 数据原样发送到服务器</span>     processData<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>     success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.jQuery实现loading效果</p><p>2.1. ajaxStart(callback)</p><p>Ajax 请求开始时，执行 ajaxStart 函数。可以在 ajaxStart 的 callback 中显示 loading 效果，示例代码如下：</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 自 jQuery 版本 1.8 起，该方法只能被附加到文档</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ajaxStart</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#loading'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意： $(document).ajaxStart() 函数会监听当前文档内所有的 Ajax 请求。</p><p>2.2. ajaxStop(callback)</p><p>Ajax 请求结束时，执行 ajaxStop 函数。可以在 ajaxStop 的 callback 中隐藏 loading 效果，示例代码如下：</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 自 jQuery 版本 1.8 起，该方法只能被附加到文档</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ajaxStop</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#loading'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-axios"><a href="#6-axios" class="headerlink" title="6.axios"></a>6.axios</h3><p>1.什么是axios</p><ul><li>Axios是专注于网络数据请求的库。</li><li>相比于原生的XMLHttpRequest对象，axios简单易用。</li><li>相比于jQuery,axios更加轻量化，只专注于网络数据请求。</li></ul><p>2.axios发起GET请求</p><p>axios 发起 get 请求的语法：</p><pre class="line-numbers language-js"><code class="language-js"> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*参数*/</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体的请求示例如下：</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 请求的 URL 地址</span> <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'http://www.liulongbin.top:3006/api/get'</span> <span class="token comment" spellcheck="true">// 请求的参数对象</span> <span class="token keyword">var</span> paramsObj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 调用 axios.get() 发起 GET 请求</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> params<span class="token punctuation">:</span> paramsObj <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// res.data 是服务器返回的数据</span>     <span class="token keyword">var</span> result <span class="token operator">=</span> res<span class="token punctuation">.</span>data     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.axios发起POST请求</p><p>axios 发起 post 请求的语法：</p><pre class="line-numbers language-js"><code class="language-js"> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*参数*/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体的请求示例如下：</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 请求的 URL 地址</span> <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'http://www.liulongbin.top:3006/api/post'</span> <span class="token comment" spellcheck="true">// 要提交到服务器的数据</span> <span class="token keyword">var</span> dataObj <span class="token operator">=</span> <span class="token punctuation">{</span> location<span class="token punctuation">:</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'顺义'</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 调用 axios.post() 发起 POST 请求</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> dataObj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// res.data 是服务器返回的数据</span>     <span class="token keyword">var</span> result <span class="token operator">=</span> res<span class="token punctuation">.</span>data     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.直接使用axios发起请求</p><p>axios 也提供了类似于 jQuery 中 $.ajax() 的函数，语法如下：</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     method<span class="token punctuation">:</span> <span class="token string">'请求类型'</span><span class="token punctuation">,</span>     url<span class="token punctuation">:</span> <span class="token string">'请求的URL地址'</span><span class="token punctuation">,</span>     data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* POST数据 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     params<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* GET参数 */</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.1直接使用axios发起GET请求</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>     url<span class="token punctuation">:</span> <span class="token string">'http://www.liulongbin.top:3006/api/get'</span><span class="token punctuation">,</span>     params<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// GET 参数要通过 params 属性提供</span>         name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>         age<span class="token punctuation">:</span> <span class="token number">20</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.2直接使用axios发起POST请求</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>     url<span class="token punctuation">:</span> <span class="token string">'http://www.liulongbin.top:3006/api/post'</span><span class="token punctuation">,</span>     data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// POST 数据要通过 data 属性提供</span>         bookname<span class="token punctuation">:</span> <span class="token string">'程序员的自我修养'</span><span class="token punctuation">,</span>         price<span class="token punctuation">:</span> <span class="token number">666</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-HTTP请求消息"><a href="#5-HTTP请求消息" class="headerlink" title="5.HTTP请求消息"></a>5.HTTP请求消息</h2><h3 id="1-HTTP请求消息的组成部分"><a href="#1-HTTP请求消息的组成部分" class="headerlink" title="1.HTTP请求消息的组成部分"></a>1.HTTP请求消息的组成部分</h3><p> 请求头部 – 常见的请求头字段</p><table><thead><tr><th><strong>头部字段</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Host</td><td>要请求的服务器域名</td></tr><tr><td>Connection</td><td>客户端与服务器的连接方式(close 或 keepalive)</td></tr><tr><td>Content-Length</td><td>用来描述请求体的大小</td></tr><tr><td>Accept</td><td>客户端可识别的响应内容类型列表</td></tr><tr><td>User-Agent</td><td>产生请求的浏览器类型</td></tr><tr><td>Content-Type</td><td>客户端告诉服务器实际发送的数据类型</td></tr><tr><td>Accept-Encoding</td><td>客户端可接收的内容压缩编码形式</td></tr><tr><td>Accept-Language</td><td>用户期望获得的自然语言的优先顺序</td></tr></tbody></table><p>关于更多请求头字段的描述，可以查看 MDN 官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers</a></p><p>总结：</p><p><img src="https://s2.loli.net/2022/06/16/4IrT2ByEsYehoNc.png" alt="image-20220616224117967"></p><h3 id="2-HTTP的请求方法"><a href="#2-HTTP的请求方法" class="headerlink" title="2.HTTP的请求方法"></a>2.HTTP的请求方法</h3><table><thead><tr><th><strong>序号</strong></th><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>1</td><td>GET</td><td>(查询)发送请求来获得服务器上的资源，请求体中不会包含请求数据，请求数据放在协议头中。</td></tr><tr><td>2</td><td>POST</td><td>(新增)向服务器提交资源（例如提交表单或上传文件）。数据被包含在请求体中提交给服务器。</td></tr><tr><td>3</td><td>PUT</td><td>(修改)向服务器提交资源，并使用提交的新资源，替换掉服务器对应的旧资源。</td></tr><tr><td>4</td><td>DELETE</td><td>(删除)请求服务器删除指定的资源。</td></tr><tr><td>5</td><td>HEAD</td><td>HEAD 方法请求一个与 GET 请求的响应相同的响应，但没有响应体。</td></tr><tr><td>6</td><td>OPTIONS</td><td>获取http服务器支持的http请求方法，允许客户端查看服务器的性能，比如ajax跨域时的预检等。</td></tr><tr><td>7</td><td>CONNECT</td><td>建立一个到由目标资源标识的服务器的隧道。</td></tr><tr><td>8</td><td>TRACE</td><td>沿着到目标资源的路径执行一个消息环回测试，主要用于测试或诊断。</td></tr><tr><td>9</td><td>PATCH</td><td>是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td></tr></tbody></table><h3 id="3-HTTP响应状态码的组成及分类"><a href="#3-HTTP响应状态码的组成及分类" class="headerlink" title="3.HTTP响应状态码的组成及分类"></a>3.<code>HTTP响应状态码的组成及分类</code></h3><p>HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字用来对状态码进行细分。HTTP 状态码共分为 5 种类型：</p><table><thead><tr><th><strong>分类</strong></th><th><strong>分类描述</strong></th></tr></thead><tbody><tr><td>1**</td><td>信息，服务器收到请求，需要请求者继续执行操作（实际开发中很少遇到 1** 类型的状态码）</td></tr><tr><td>2**</td><td>成功，操作被成功接收并处理</td></tr><tr><td>3**</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4**</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5**</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p>完整的 HTTP 响应状态码，可以参考 MDN 官方文档 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</a></p><p>2** 范围的状态码，表示服务器已成功接收到请求并进行处理。常见的 2** 类型的状态码如下：</p><table><thead><tr><th><strong>状态码</strong></th><th><strong>状态码英文名称</strong></th><th><strong>中文描述</strong></th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>请求成功。一般用于 GET 与 POST 请求</td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源，通常用于 POST 或 PUT 请求</td></tr></tbody></table><p>3** 范围的状态码，表示表示服务器要求客户端重定向，需要客户端进一步的操作以完成资源的请求。常见的 3** 类型的状态码如下：</p><table><thead><tr><th><strong>状态码</strong></th><th><strong>状态码英文名称</strong></th><th><strong>中文描述</strong></th></tr></thead><tbody><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源（响应消息中不包含响应体）。客户端通常会缓存访问过的资源。</td></tr></tbody></table><p>4** 范围的状态码，表示客户端的请求有非法内容，从而导致这次请求失败。常见的 4** 类型的状态码如下：</p><table><thead><tr><th><strong>状态码</strong></th><th><strong>状态码英文名称</strong></th><th><strong>中文描述</strong></th></tr></thead><tbody><tr><td>400</td><td>Bad Request</td><td>1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。2、请求参数有误。</td></tr><tr><td>401</td><td>Unauthorized</td><td>当前请求需要用户验证。</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器已经理解请求，但是拒绝执行它。</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。</td></tr><tr><td>408</td><td>Request Timeout</td><td>请求超时。服务器等待客户端发送的请求时间过长，超时。</td></tr></tbody></table><p>5** 范围的状态码，表示服务器未能正常处理客户端的请求而出现意外错误。常见的 5** 类型的状态码如下：</p><table><thead><tr><th><strong>状态码</strong></th><th><strong>状态码英文名称</strong></th><th><strong>中文描述</strong></th></tr></thead><tbody><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求。</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持该请求方法，无法完成请求。只有 GET 和 HEAD 请求方法是要求每个服务器必须支持的，其它请求方法在不支持的服务器上会返回501</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js第二天</title>
      <link href="/2022/061549640.html"/>
      <url>/2022/061549640.html</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js模块化"><a href="#Node-js模块化" class="headerlink" title="Node.js模块化"></a>Node.js模块化</h1><h2 id="1-模块化的基本概念"><a href="#1-模块化的基本概念" class="headerlink" title="1. 模块化的基本概念"></a>1. 模块化的基本概念</h2><h3 id="1-1-什么是模块化"><a href="#1-1-什么是模块化" class="headerlink" title="1.1 什么是模块化"></a>1.1 什么是模块化</h3><p>模块化是指：解决一个复杂问题时，自顶向下逐层把系统划分成若干模块的过程。对于整个系统来说，模块是可组 合、分解和更换的单元。</p><p><strong>编程领域中的模块化</strong>，就是遵守固定的规则，把一个大文件拆成独立并互相依赖的多个小模块。 把代码进行模块化拆分的好处： </p><p>① 提高了代码的复用性 </p><p>② 提高了代码的可维护性 </p><p>③ 可以实现按需加载</p><h3 id="1-2-模块化规范"><a href="#1-2-模块化规范" class="headerlink" title="1.2 模块化规范"></a>1.2 模块化规范</h3><p>模块化规范就是对代码进行模块化的拆分与组合时，需要遵守的那些规则。</p><h2 id="2-Node-js-中模块化"><a href="#2-Node-js-中模块化" class="headerlink" title="2.Node.js 中模块化"></a>2.Node.js 中模块化</h2><h3 id="2-1-Node-js-中模块的分类"><a href="#2-1-Node-js-中模块的分类" class="headerlink" title="2.1 Node.js 中模块的分类"></a>2.1 Node.js 中模块的分类</h3><p>Node.js 中根据模块来源的不同，将模块分为了 3 大类，分别是： </p><ul><li>内置模块（内置模块是由 Node.js 官方提供的，例如 fs、path、http 等）</li><li>自定义模块（用户创建的每个 .js 文件，都是自定义模块） </li><li>第三方模块（由第三方开发出来的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，使用前需要先下载）</li></ul><h3 id="2-2-加载模块"><a href="#2-2-加载模块" class="headerlink" title="2.2 加载模块"></a>2.2 加载模块</h3><p>使用强大的 require() 方法，可以加载需要的内置模块、用户自定义模块、第三方模块进行使用。例如</p><p><img src="https://s2.loli.net/2022/06/15/2woRSmYZyIMitsU.png" alt="image-20220615213250658"></p><h3 id="2-3-Node-js-中的模块作用域"><a href="#2-3-Node-js-中的模块作用域" class="headerlink" title="2.3 Node.js 中的模块作用域"></a>2.3 Node.js 中的模块作用域</h3><p>1.什么是模块作用域:</p><p>  和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块 作用域</p><p><img src="https://s2.loli.net/2022/06/15/GjIkPYqZ5DhzLpo.png" alt="image-20220615213424720"></p><p>2.模块作用域的好处</p><p>防止了全局变量污染的问题</p><p><img src="https://s2.loli.net/2022/06/15/JUfpB95bFCxmeML.png" alt="image-20220615213600052"></p><h3 id="2-4-向外共享模块作用域中的成员"><a href="#2-4-向外共享模块作用域中的成员" class="headerlink" title="2.4 向外共享模块作用域中的成员"></a>2.4 向外共享模块作用域中的成员</h3><p>1.module 对象</p><p>在每个 .js 自定义模块中都有一个 module 对象，它里面存储了和当前模块有关的信息，打印如下</p><p><img src="https://s2.loli.net/2022/06/15/abE5CG4XQd1TyYA.png" alt="image-20220615213710882"></p><p>2.module.exports 对象</p><p>在自定义模块中，可以使用 module.exports 对象，将模块内的成员共享出去，供外界使用。 外界用 require() 方法导入自定义模块时，得到的就是 module.exports 所指向的对象。</p><p>3.共享成员时的注意点</p><p><img src="https://s2.loli.net/2022/06/15/bKOQRVN3CtpTDG1.png" alt="image-20220615213832477"></p><p>4.exports 对象</p><p>由于 module.exports 单词写起来比较复杂，为了简化向外共享成员的代码，Node 提供了 exports 对象。默认情况 下，exports 和 module.exports 指向同一个对象。最终共享的结果，还是以 module.exports 指向的对象为准</p><p><img src="https://s2.loli.net/2022/06/15/HhGve6MSAuywa9q.png" alt="image-20220615213953150"></p><p>5.exports 和 module.exports 的使用误区</p><p><img src="https://s2.loli.net/2022/06/15/WvenKr4xJAtUIsq.png" alt="image-20220615214047745"></p><h3 id="2-5-Node-js-中的模块化规范"><a href="#2-5-Node-js-中的模块化规范" class="headerlink" title="2.5 Node.js 中的模块化规范"></a>2.5 Node.js 中的模块化规范</h3><p> Node.js 遵循了 CommonJS 模块化规范，CommonJS 规定了模块的特性和各模块之间如何相互依赖。 CommonJS 规定：</p><p> ① 每个模块内部，module 变量代表当前模块。 </p><p>② module 变量是一个对象，它的 exports 属性（即 module.exports）是对外的接口</p><p> ③ 加载某个模块，其实是加载该模块的 module.exports 属性。require() 方法用于加载模块</p><h2 id="3-npm与包"><a href="#3-npm与包" class="headerlink" title="3.npm与包"></a>3.npm与包</h2><h3 id="3-1包"><a href="#3-1包" class="headerlink" title="3.1包"></a>3.1包</h3><h4 id="1-什么是包"><a href="#1-什么是包" class="headerlink" title="1.什么是包"></a>1.什么是包</h4><p>Node.js 中的第三方模块又叫做包。 就像电脑和计算机指的是相同的东西，第三方模块和包指的是同一个概念，只不过叫法不同</p><h4 id="2-包的来源"><a href="#2-包的来源" class="headerlink" title="2.包的来源"></a>2.包的来源</h4><p>不同于 Node.js 中的内置模块与自定义模块，包是由第三方个人或团队开发出来的，免费供所有人使用。 注意：Node.js 中的包都是免费且开源的，不需要付费即可免费下载使用</p><h4 id="3-为什么需要包"><a href="#3-为什么需要包" class="headerlink" title="3.为什么需要包"></a>3.为什么需要包</h4><p>由于 Node.js 的内置模块仅提供了一些底层的 API，导致在基于内置模块进行项目开发的时，效率很低。 包是基于内置模块封装出来的，提供了更高级、更方便的 API，极大的提高了开发效率。 包和内置模块之间的关系，类似于 jQuery 和 浏览器内置 API 之间的关系.</p><h4 id="4-从哪里下载包"><a href="#4-从哪里下载包" class="headerlink" title="4.从哪里下载包"></a>4.从哪里下载包</h4><p>国外有一家 IT 公司，叫做 npm, Inc. 这家公司旗下有一个非常著名的网站： <a href="https://www.npmjs.com/">https://www.npmjs.com/</a> ，它是全球最 大的包共享平台，你可以从这个网站上搜索到任何你需要的包，只要你有足够的耐心！ 到目前位置，全球约 1100 多万的开发人员，通过这个包共享平台，开发并共享了超过 120 多万个包 供我们使用。 npm, Inc. 公司提供了一个地址为 <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a> 的服务器，来对外共享所有的包，我们可以从这个服务 器上下载自己所需要的包。 </p><p>注意：</p><ul><li>从 <a href="https://www.npmjs.com/">https://www.npmjs.com/</a> 网站上搜索自己所需要的包 </li><li>从 <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a> 服务器上下载自己需要的包</li></ul><h4 id="5-如何下载包"><a href="#5-如何下载包" class="headerlink" title="5.如何下载包"></a>5.如何下载包</h4><p> npm, Inc. 公司提供了一个包管理工具，我们可以使用这个包管理工具，从 <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a> 服务器把需要 的包下载到本地使用。 这个包管理工具的名字叫做 Node Package Manager（简称 npm 包管理工具），这个包管理工具随着 Node.js 的安 装包一起被安装到了用户的电脑上。 </p><p>大家可以在终端中执行 npm -v 命令，来查看自己电脑上所安装的 npm 包管理工具的版本号：</p><h3 id="3-2-npm-初体验"><a href="#3-2-npm-初体验" class="headerlink" title="3.2 npm 初体验"></a>3.2 npm 初体验</h3><h4 id="1-在项目中安装包的命令"><a href="#1-在项目中安装包的命令" class="headerlink" title="1. 在项目中安装包的命令"></a>1. 在项目中安装包的命令</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> install包的完整名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-初次装包后多了哪些文件"><a href="#2-初次装包后多了哪些文件" class="headerlink" title="2.初次装包后多了哪些文件"></a>2.初次装包后多了哪些文件</h4><p>初次装包完成后，在项目文件夹下多一个叫做 node_modules 的文件夹和 package-lock.json 的配置文件。 其中： node_modules 文件夹用来存放所有已安装到项目中的包。require() 导入第三方包时，就是从这个目录中查找并加载包。 package-lock.json 配置文件用来记录 node_modules 目录下的每一个包的下载信息，例如包的名字、版本号、下载地址等。 注意：程序员不要手动修改 node_modules 或 package-lock.json 文件中的任何代码，npm 包管理工具会自动维护它们</p><h4 id="3-安装指定版本的包"><a href="#3-安装指定版本的包" class="headerlink" title="3. 安装指定版本的包"></a>3. 安装指定版本的包</h4><pre class="line-numbers language-bash"><code class="language-bash">默认情况下，使用 <span class="token function">npm</span> <span class="token function">install</span> 命令安装包的时候，会自动安装最新版本的包。如果需要安装指定版本的包，可以在包名之后，通过 @ 符号指定具体的版本，例如<span class="token function">npm</span> i moment@2.22.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-包的语义化版本规范"><a href="#4-包的语义化版本规范" class="headerlink" title="4.包的语义化版本规范"></a>4.包的语义化版本规范</h4><p>包的版本号是以“点分十进制”形式进行定义的，总共有三位数字，例如 2.24.0 其中每一位数字所代表的的含义如下： </p><p>第1位数字：大版本 </p><p>第2位数字：功能版本 </p><p>第3位数字：Bug修复版本 版本号提升的规则：只要前面的版本号增长了，则后面的版本号归零</p><h3 id="3-3-包管理配置文件"><a href="#3-3-包管理配置文件" class="headerlink" title="3.3 包管理配置文件"></a>3.3 包管理配置文件</h3><h4 id="1-如何记录项目中安装了哪些包"><a href="#1-如何记录项目中安装了哪些包" class="headerlink" title="1.如何记录项目中安装了哪些包"></a>1.如何记录项目中安装了哪些包</h4><p>在项目根目录中，创建一个叫做 package.json 的配置文件，即可用来记录项目中安装了哪些包。从而方便剔除 node_modules 目录之后，在团队成员之间共享项目的源代码。 </p><p>注意：今后在项目开发中，一定要把 node_modules 文件夹，添加到 .gitignore 忽略文件中。</p><h4 id="2-快速创建-package-json"><a href="#2-快速创建-package-json" class="headerlink" title="2.快速创建 package.json"></a>2.快速创建 package.json</h4><p>npm 包管理工具提供了一个快捷命令，可以在执行命令时所处的目录中，快速创建 package.json 这个包管理 配置文件：</p><pre class="line-numbers language-bash"><code class="language-bash">//作用:在执行命令所处的目录中，快速新建package.json文件<span class="token function">npm</span> init -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：</p><p> ① 上述命令只能在英文的目录下成功运行！所以，项目文件夹的名称一定要使用英文命名，不要使用中文，不能出现空格。 </p><p>② 运行 npm install 命令安装包的时候，npm 包管理工具会自动把包的名称和版本号，记录到 package.json 中。</p><h4 id="3-一次性安装所有的包"><a href="#3-一次性安装所有的包" class="headerlink" title="3.一次性安装所有的包"></a>3.一次性安装所有的包</h4><pre class="line-numbers language-tex"><code class="language-tex">可以运行 npm install 命令（或 npm i）一次性安装所有的依赖包<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-卸载包"><a href="#4-卸载包" class="headerlink" title="4.卸载包"></a>4.卸载包</h4><pre class="line-numbers language-bash"><code class="language-bash">可以运行 <span class="token function">npm</span> uninstall 命令，来卸载指定的包：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：npm uninstall 命令执行成功后，会把卸载的包，自动从 package.json 的 dependencies 中移除掉。</p><h4 id="5-devDependencies-节点"><a href="#5-devDependencies-节点" class="headerlink" title="5.. devDependencies 节点"></a>5.. devDependencies 节点</h4><p>如果某些包只在项目开发阶段会用到，在项目上线之后不会用到，则建议把这些包记录到 devDependencies 节点中。 与之对应的，如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到 dependencies 节点中。 您可以使用如下的命令，将包记录到 devDependencies 节点中：</p><p><img src="https://s2.loli.net/2022/06/15/FU6Od1B9ylDqTZR.png" alt="image-20220615215908618"></p><h3 id="3-4-解决下包速度慢的问题"><a href="#3-4-解决下包速度慢的问题" class="headerlink" title="3.4 解决下包速度慢的问题"></a>3.4 解决下包速度慢的问题</h3><p><img src="https://s2.loli.net/2022/06/15/62Xha8E9F5STxN4.png" alt="image-20220615215956061"></p><h4 id="1-切换-npm-的下包镜像源"><a href="#1-切换-npm-的下包镜像源" class="headerlink" title="1.切换 npm 的下包镜像源"></a>1.切换 npm 的下包镜像源</h4><p><img src="https://s2.loli.net/2022/06/15/kDnXqEVWwcHoeUT.png" alt="image-20220615220226059"></p><p><strong>安装nrm</strong></p><p><img src="https://s2.loli.net/2022/06/15/Mj2FPKGnUxr9Wsa.png" alt="image-20220615220148879"></p><h3 id="3-5-包的分类"><a href="#3-5-包的分类" class="headerlink" title="3.5 包的分类"></a>3.5 包的分类</h3><h4 id="1-使用-npm-包管理工具下载的包，共分为两大类，分别是："><a href="#1-使用-npm-包管理工具下载的包，共分为两大类，分别是：" class="headerlink" title="1.使用 npm 包管理工具下载的包，共分为两大类，分别是："></a>1.使用 npm 包管理工具下载的包，共分为两大类，分别是：</h4><ul><li>项目包 </li><li>全局包</li></ul><h4 id="2-项目包"><a href="#2-项目包" class="headerlink" title="2.项目包"></a>2.项目包</h4><p>那些被安装到项目的 node_modules 目录中的包，都是项目包。 </p><p>项目包又分为两类，分别是：</p><ul><li><p>开发依赖包（被记录到 devDependencies 节点中的包，只在开发期间会用到）</p></li><li><p>核心依赖包（被记录到 dependencies 节点中的包，在开发期间和项目上线之后都会用到）</p></li></ul><p>  <img src="https://s2.loli.net/2022/06/15/XtJxTHONhjl3eGD.png" alt="image-20220615220511216"></p><h4 id="3-全局包"><a href="#3-全局包" class="headerlink" title="3.全局包"></a>3.全局包</h4><p> 在执行 npm install 命令时，如果提供了 -g 参数，则会把包安装为全局包。</p><p> 全局包会被安装到 C:\Users\用户目录\AppData\Roaming\npm\node_modules 目录下。</p><p><img src="https://s2.loli.net/2022/06/15/TdcMl12hPWHXbBE.png" alt="image-20220615220615110"></p><p>注意： </p><p>① 只有工具性质的包，才有全局安装的必要性。因为它们提供了好用的终端命令。 </p><p>② 判断某个包是否需要全局安装后才能使用，可以参考官方提供的使用说明即可。</p><h2 id="4-模块的加载机制"><a href="#4-模块的加载机制" class="headerlink" title="4.模块的加载机制"></a>4.模块的加载机制</h2><h3 id="4-1-优先从缓存中加载"><a href="#4-1-优先从缓存中加载" class="headerlink" title="4.1 优先从缓存中加载"></a>4.1 优先从缓存中加载</h3><p>模块在第一次加载后会被缓存。 这也意味着多次调用 require() 不会导致模块的代码被执行多次。 注意：不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率。</p><h3 id="4-2-内置模块的加载机制"><a href="#4-2-内置模块的加载机制" class="headerlink" title="4.2 内置模块的加载机制"></a>4.2 内置模块的加载机制</h3><p>内置模块是由 Node.js 官方提供的模块，内置模块的加载优先级最高。 例如，require(‘fs’) 始终返回内置的 fs 模块，即使在 node_modules 目录下有名字相同的包也叫做 fs。</p><h3 id="4-3-自定义模块的加载机制"><a href="#4-3-自定义模块的加载机制" class="headerlink" title="4.3 自定义模块的加载机制"></a>4.3 自定义模块的加载机制</h3><p> 使用 require() 加载自定义模块时，必须指定以 .&#x2F; 或 ..&#x2F; 开头的路径标识符。在加载自定义模块时，如果没有指定 .&#x2F; 或 ..&#x2F;  这样的路径标识符，则 node 会把它当作内置模块或第三方模块进行加载。</p><p> 同时，在使用 require() 导入自定义模块时，如果省略了文件的扩展名，则 Node.js 会按顺序分别尝试加载以下的文件：</p><p> ① 按照确切的文件名进行加载 </p><p>② 补全 .js 扩展名进行加载 </p><p>③ 补全 .json 扩展名进行加载 </p><p>④ 补全 .node 扩展名进行加载 </p><p>⑤ 加载失败，终端报错</p><h3 id="4-4-第三方模块的加载机制"><a href="#4-4-第三方模块的加载机制" class="headerlink" title="4.4 第三方模块的加载机制"></a>4.4 第三方模块的加载机制</h3><p> 如果传递给 require() 的模块标识符不是一个内置模块，也没有以 ‘.&#x2F;’ 或 ‘..&#x2F;’ 开头，则 Node.js 会从当前模块的父 目录开始，尝试从 &#x2F;node_modules 文件夹中加载第三方模块。</p><p> 如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录。 例如，</p><p>假设在 ‘C:\Users\itheima\project\foo.js’ 文件里调用了 require(‘tools’)，则 Node.js 会按以下顺序查找：</p><p> ① C:\Users\itheima\project\node_modules\tools </p><p>② C:\Users\itheima\node_modules\tools </p><p>③ C:\Users\node_modules\tools </p><p>④ C:\node_modules\tools</p><h3 id="4-5-目录作为模块"><a href="#4-5-目录作为模块" class="headerlink" title="4.5 目录作为模块"></a>4.5 目录作为模块</h3><p> 当把目录作为模块标识符，传递给 require() 进行加载的时候，有三种加载方式：</p><p> ① 在被加载的目录下查找一个叫做 package.json 的文件，并寻找 main 属性，作为 require() 加载的入口</p><p> ② 如果目录里没有 package.json 文件，或者 main 入口不存在或无法解析，则 Node.js 将会试图加载目录下的 index.js 文件。</p><p> ③ 如果以上两步都失败了，则 Node.js 会在终端打印错误消息，报告模块的缺失：Error: Cannot find module ‘xxx</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js第一天</title>
      <link href="/2022/061420882.html"/>
      <url>/2022/061420882.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Node-js-简介"><a href="#1-Node-js-简介" class="headerlink" title="1.Node.js 简介"></a>1.Node.js 简介</h2><img src="https://s2.loli.net/2022/06/14/1UMHZOhPTkmCxrQ.png" alt="image-20220614213254709" style="zoom:80%;" /><p>注意： </p><p>① 浏览器是 JavaScript 的前端运行环境。 </p><p>② Node.js 是 JavaScript 的后端运行环境。 </p><p>③ Node.js 中无法调用 DOM 和 BOM 等 浏览器内置 API。</p><h3 id="1-1Node-js-可以做什么"><a href="#1-1Node-js-可以做什么" class="headerlink" title="1. 1Node.js 可以做什么"></a>1. 1Node.js 可以做什么</h3><p>​Node.js 作为一个 JavaScript 的运行环境，仅仅提供了基础的功能和 API。然而，基于 Node.js 提供的这些基础能，很多强大 的工具和框架如雨后春笋，层出不穷，所以学会了 Node.js ，可以让前端程序员胜任更多的工作和岗位： </p><p>① 基于 Express 框架（<a href="http://www.expressjs.com.cn/%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA">http://www.expressjs.com.cn/），可以快速构建</a> Web 应用 </p><p>② 基于 Electron 框架（<a href="https://electronjs.org/%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%9E%84%E5%BB%BA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8">https://electronjs.org/），可以构建跨平台的桌面应用</a></p><p> ③ 基于 restify 框架（<a href="http://restify.com/%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA">http://restify.com/），可以快速构建</a> API 接口项目</p><p> ④ 读写和操作数据库、创建实用的命令行工具辅助前端开发、etc…</p><h3 id="1-2-Node-js-怎么学"><a href="#1-2-Node-js-怎么学" class="headerlink" title="1.2 Node.js 怎么学"></a>1.2 Node.js 怎么学</h3><p><strong>Node.js 的学习路径： JavaScript 基础语法 + Node.js 内置 API 模块（fs、path、http等）+ 第三方 API 模块（express、mysql 等</strong></p><h3 id="1-3-Node-js-环境的安装"><a href="#1-3-Node-js-环境的安装" class="headerlink" title="1.3 Node.js 环境的安装"></a>1.3 Node.js 环境的安装</h3><ol><li>安装包可以从 Node.js 的官网首页直接下载，进入到 Node.js 的官网首页（<a href="https://nodejs.org/en/%EF%BC%89%EF%BC%8C%E7%82%B9%E5%87%BB">https://nodejs.org/en/），点击</a> 绿色的按钮，下载所需的版本后，双击直接安装即可</li></ol><p><img src="https://s2.loli.net/2022/06/14/QcbVhoUP9YfdrSM.png" alt="image-20220614213733865"></p><ol start="2"><li><p>查看已安装的 Node.js 的版本号</p><p>Windows 系统快速打开终端的方式： 使用快捷键（Windows徽标键 + R）打开运行面板，输入 cmd 后直接回车，即可打开终端</p></li><li><p>终端中的快捷键</p><p>在 Windows 的 powershell 或 cmd 终端中，我们可以通过如下快捷键，来提高终端的操作效率：</p><p> ① 使用 ↑ 键，可以快速定位到上一次执行的命令 </p><p>② 使用 tab 键，能够快速补全路径 </p><p>③ 使用 esc 键，能够快速清空当前已输入的命令</p><p> ④ 输入 cls 命令，可以清空终端</p></li></ol><h2 id="2-Node-js中-fs-文件系统模块"><a href="#2-Node-js中-fs-文件系统模块" class="headerlink" title="2.Node.js中 fs 文件系统模块"></a>2.Node.js中 fs 文件系统模块</h2><h3 id="2-1-什么是-fs-文件系统模块"><a href="#2-1-什么是-fs-文件系统模块" class="headerlink" title="2.1 什么是 fs 文件系统模块"></a>2.1 什么是 fs 文件系统模块</h3><p>fs 模块是 Node.js 官方提供的、用来操作文件的模块。它提供了一系列的方法和属性，用来满足用户对文件的操作需求。</p><p>例如：</p><ul><li>fs.readFile() 方法， 用来读取指定文件中的内容 </li><li>fs.writeFile() 方法， 用来向指定的文件中写入内容</li></ul><p><img src="https://s2.loli.net/2022/06/14/9vnlIQCHxDsMJZo.png" alt="image-20220614214359183"></p><h3 id="2-2-fs读取指定文件中的内容"><a href="#2-2-fs读取指定文件中的内容" class="headerlink" title="2.2 fs读取指定文件中的内容"></a>2.2 fs读取指定文件中的内容</h3><p>1.fs.readFile() 的语法格式</p><pre class="line-numbers language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数解读： </p><ul><li><p>参数1：必选参数，字符串，表示文件的路径。</p></li><li><p>参数2：可选参数，表示以什么编码格式来读取文件。</p></li><li><p>参数3：必选参数，文件读取完成后，通过回调函数拿到读取的结果。</p></li></ul><p>示例代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'1/1.txt'</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span>datastr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"=="</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>datastr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//读取1.txt中的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="https://s2.loli.net/2022/06/14/cVeKoljPfWmaC2z.png" alt="image-20220614214810254"></p><h3 id="2-3-fs向指定的文件中写入内容"><a href="#2-3-fs向指定的文件中写入内容" class="headerlink" title="2.3 fs向指定的文件中写入内容"></a>2.3 fs向指定的文件中写入内容</h3><pre class="line-numbers language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>data<span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数解读： </p><ul><li>参数1：必选参数，需要指定一个文件路径的字符串，表示文件的存放路径。</li><li>参数2：必选参数，表示要写入的内容。</li><li>参数3：可选参数，表示以什么格式写入文件内容，默认值是 utf8。</li><li>参数4：必选参数，文件写入完成后的回调函数</li></ul><p>示例代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'1/1.txt'</span><span class="token punctuation">,</span><span class="token string">'svjhgsjdhgfjhsdgjfh'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//写入1.txt中的数据为:svjhgsjdhgfjhsdgjfh。</span><span class="token comment" spellcheck="true">//注:写入时会将1.txt中的内容清空后再写入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4fs案例"><a href="#2-4fs案例" class="headerlink" title="2.4fs案例"></a>2.4fs案例</h3><p>使用 fs 文件系统模块，将素材目录下成绩.txt文件中的考试数据，整理到成绩-ok.txt文件中。 整理前，成绩.txt文件中的数据格式如下：</p><p>整理前：</p><p><img src="https://s2.loli.net/2022/06/14/j9EPZdaqAT8HQ1V.png" alt="image-20220614220522508"></p><p>整理后：</p><p><img src="https://s2.loli.net/2022/06/14/QCP8gtbueAFfiEx.png" alt="image-20220614220607604"></p><p>代码如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'1/1.txt'</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span>datastr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.将字符串转换为数组</span>    <span class="token keyword">const</span> arr<span class="token operator">=</span>datastr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//2.对每一项数据进行字符串的替换</span>    <span class="token keyword">const</span> arrnew<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>items <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        arrnew<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrnew<span class="token punctuation">)</span>   items<span class="token operator">=</span>arrnew<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//3.把数组中的每一项，进行合并，得到新的字符串</span>        fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'1/2.txt'</span><span class="token punctuation">,</span>items<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意: arr.join([separator]) </span><span class="token comment" spellcheck="true">//separator 可选</span><span class="token comment" spellcheck="true">//指定一个字符串来分隔数组的每个元素。如果需要，将分隔符转换为字符串。如果缺省该值，数组元素用逗号（,）分隔。如果separator是空字符串 ("")，则所有元素之间都没有任何字符。</span><span class="token comment" spellcheck="true">//返回值</span><span class="token comment" spellcheck="true">//一个所有数组元素连接的字符串。如果 arr.length 为 0，则返回空字符串。</span><span class="token comment" spellcheck="true">//示例:</span><span class="token comment" spellcheck="true">//var a = ['Wind', 'Rain', 'Fire'];</span><span class="token comment" spellcheck="true">//var myVar1 = a.join();      // myVar1 的值变为"Wind,Rain,Fire"</span><span class="token comment" spellcheck="true">//var myVar2 = a.join(', ');  // myVar2 的值变为"Wind, Rain, Fire"</span><span class="token comment" spellcheck="true">//var myVar3 = a.join(' + '); // myVar3 的值变为"Wind + Rain + Fire"</span><span class="token comment" spellcheck="true">//var myVar4 = a.join('');    // myVar4 的值变为"WindRainFire"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提示：1. 如果有换行符可以用replace()来清除   </p><h3 id="2-5-fs-模块-路径动态拼接的问题"><a href="#2-5-fs-模块-路径动态拼接的问题" class="headerlink" title="2.5 fs 模块 - 路径动态拼接的问题"></a>2.5 fs 模块 - 路径动态拼接的问题</h3><p>在使用 fs 模块操作文件时，如果提供的操作路径是以 .&#x2F; 或 ..&#x2F; 开头的相对路径时，很容易出现路径动态拼接错误的问题。 </p><p>原因：代码在运行的时候，会以执行 node 命令时所处的目录，动态拼接出被操作文件的完整路径。</p><p> 解决方案：在使用 fs 模块操作文件时，直接提供完整的路径，不要提供 .&#x2F; 或 ..&#x2F; 开头的相对路径，从而防止路径动态拼接的问题。</p><p><strong>_dirname:输出当前路径</strong></p><p><img src="https://s2.loli.net/2022/06/15/jGo7EPlCRAtaBkF.png" alt="image-20220615143724931"></p><h2 id="3-Node-js中path-路径模块"><a href="#3-Node-js中path-路径模块" class="headerlink" title="3. Node.js中path 路径模块"></a>3. Node.js中path 路径模块</h2><h3 id="3-1-什么是-path-路径模块"><a href="#3-1-什么是-path-路径模块" class="headerlink" title="3.1 什么是 path 路径模块"></a>3.1 什么是 path 路径模块</h3><p>path 模块是 Node.js 官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理 需求</p><p>导入模块：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> path<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-路径拼接"><a href="#3-2-路径拼接" class="headerlink" title="3.2 路径拼接"></a>3.2 路径拼接</h3><p>1.path.join() 的语法格式</p><p>使用 path.join() 方法，可以把多个路径片段拼接为完整的路径字符串，语法格式如下：</p><pre class="line-numbers language-js"><code class="language-js">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>paths<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数解读： </p><p> …paths  :<string>路径片段的序列</p><p>  返回值: <string></p><p><img src="https://s2.loli.net/2022/06/15/2juw1F9dLpxkGIv.png" alt="image-20220615144528952"></p><p><strong>注意：..&#x2F;会抵消前面的路径。</strong></p><h3 id="3-3-获取路径中的文件名"><a href="#3-3-获取路径中的文件名" class="headerlink" title="3.3 获取路径中的文件名"></a>3.3 获取路径中的文件名</h3><p>1.path.basename() 的语法格式 使用 path.basename() 方法，可以获取路径中的最后一部分，经常通过这个方法获取路径中的文件名.语法格式如下：</p><pre class="line-numbers language-js"><code class="language-js">path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">,</span> ext<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数解读：</p><ul><li><p>path<string>  必选参数，表示一个路径的字符串 </p></li><li><p>ext<string>  可选参数，表示文件扩展名 </p></li><li><p>返回: <string> 表示路径中的最后一部分</p></li></ul><p><img src="https://s2.loli.net/2022/06/15/XKWUwI3F2hZtQqe.png" alt="image-20220615205632909"></p><h3 id="3-4-获取路径中的文件扩展名"><a href="#3-4-获取路径中的文件扩展名" class="headerlink" title="3.4 获取路径中的文件扩展名"></a>3.4 获取路径中的文件扩展名</h3><p>path.extname() 的语法格式 </p><p>使用 path.extname() 方法，可以获取路径中的扩展名部分，语法格式如下：</p><pre class="line-numbers language-js"><code class="language-js">path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 参数解读：</p><ul><li>path <string>必选参数，表示一个路径的字符串 </li><li>返回:  <string>返回得到的扩展名字符串</li></ul><p><img src="https://s2.loli.net/2022/06/15/NOebWgCac74Dlvh.png" alt="image-20220615205901446"></p><p>案列：</p><p><img src="https://s2.loli.net/2022/06/15/RHV5JxW7DYKPyqQ.png" alt="image-20220615210058720"></p><p>代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.1 导入 fs 模块</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1.2 导入 path 模块</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1.3 定义正则表达式，分别匹配 &lt;style>&lt;/style> 和 &lt;script>&lt;/script> 标签</span><span class="token keyword">const</span> regStyle <span class="token operator">=</span> <span class="token regex">/&lt;style>[\s\S]*&lt;\/style>/</span><span class="token keyword">const</span> regScript <span class="token operator">=</span> <span class="token regex">/&lt;script>[\s\S]*&lt;\/script>/</span><span class="token comment" spellcheck="true">// 2.1 调用 fs.readFile() 方法读取文件</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../素材/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> dataStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 2.2 读取 HTML 文件失败</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取HTML文件失败！'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 2.3 读取文件成功后，调用对应的三个方法，分别拆解出 css, js, html 文件</span>  <span class="token function">resolveCSS</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span>  <span class="token function">resolveJS</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span>  <span class="token function">resolveHTML</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3.1 定义处理 css 样式的方法</span><span class="token keyword">function</span> <span class="token function">resolveCSS</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 3.2 使用正则提取需要的内容</span>  <span class="token keyword">const</span> r1 <span class="token operator">=</span> regStyle<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 3.3 将提取出来的样式字符串，进行字符串的 replace 替换操作</span>  <span class="token keyword">const</span> newCSS <span class="token operator">=</span> r1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'&lt;style>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'&lt;/style>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 3.4 调用 fs.writeFile() 方法，将提取的样式，写入到 clock 目录中 index.css 的文件里面</span>  fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./clock/index.css'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newCSS<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入 CSS 样式失败！'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入样式文件成功！'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 4.1 定义处理 js 脚本的方法</span><span class="token keyword">function</span> <span class="token function">resolveJS</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 4.2 通过正则，提取对应的 &lt;script>&lt;/script> 标签内容</span>  <span class="token keyword">const</span> r2 <span class="token operator">=</span> regScript<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 4.3 将提取出来的内容，做进一步的处理</span>  <span class="token keyword">const</span> newJS <span class="token operator">=</span> r2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'&lt;script>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'&lt;/script>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 4.4 将处理的结果，写入到 clock 目录中的 index.js 文件里面</span>  fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./clock/index.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newJS<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入 JavaScript 脚本失败！'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入 JS 脚本成功！'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 5.1 定义处理 HTML 结构的方法</span><span class="token keyword">function</span> <span class="token function">resolveHTML</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 5.2 将字符串调用 replace 方法，把内嵌的 style 和 script 标签，替换为外联的 link 和 script 标签</span>  <span class="token keyword">const</span> newHTML <span class="token operator">=</span> htmlStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regStyle<span class="token punctuation">,</span> <span class="token string">'&lt;link rel="stylesheet" href="./index.css" />'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regScript<span class="token punctuation">,</span> <span class="token string">'&lt;script src="./index.js">&lt;/script>'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 5.3 写入 index.html 这个文件</span>  fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./clock/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newHTML<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入 HTML 文件失败！'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入 HTML 页面成功！'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Node-js中http-模块"><a href="#4-Node-js中http-模块" class="headerlink" title="4.Node.js中http 模块"></a>4.Node.js中http 模块</h2><h3 id="4-1什么是-http-模块"><a href="#4-1什么是-http-模块" class="headerlink" title="4.1什么是 http 模块"></a>4.1什么是 http 模块</h3><p>http 模块是 Node.js 官方提供的、用来创建 web 服务器的模块。通过 http 模块提供的 http.createServer() 方法，就 能方便的把一台普通的电脑，变成一台 Web 服务器，从而对外提供 Web 资源服务。</p><p>导入：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span> <span class="token string">' http '</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-进一步理解-http-模块的作用"><a href="#4-2-进一步理解-http-模块的作用" class="headerlink" title="4.2 进一步理解 http 模块的作用"></a>4.2 进一步理解 http 模块的作用</h3><ol><li><p>服务器和普通电脑的区别在于，服务器上安装了 web 服务器软件，例如：IIS、Apache 等。通过安装这些服务器软件， 就能把一台普通的电脑变成一台 web 服务器。 </p></li><li><p>在 Node.js 中，我们不需要使用 IIS、Apache 等这些第三方 web 服务器软件。因为我们可以基于 Node.js 提供的 http 模块，通过几行简单的代码，就能轻松的手写一个服务器软件，从而对外提供 web 服务。</p></li></ol><h3 id="4-3-服务器相关的概念"><a href="#4-3-服务器相关的概念" class="headerlink" title="4.3 服务器相关的概念"></a>4.3 服务器相关的概念</h3><ol><li><p>IP 地址</p><p>IP 地址就是互联网上每台计算机的唯一地址，因此 IP 地址具有唯一性。如果把“个人电脑”比作“一台电话”，那么“IP地 址”就相当于“电话号码”，只有在知道对方 IP 地址的前提下，才能与对应的电脑之间进行数据通信。</p></li><li><p>域名和域名服务器</p><p>尽管 IP 地址能够唯一地标记网络上的计算机，但IP地址是一长串数字，不直观，而且不便于记忆，于是人们又发明了另一套 字符型的地址方案，即所谓的域名（Domain Name）地址。 IP地址和域名是一一对应的关系，这份对应关系存放在一种叫做域名服务器(DNS，Domain name server)的电脑中。</p><p>使用者 只需通过好记的域名访问对应的服务器即可，对应的转换工作由域名服务器实现。因此，域名服务器就是提供 IP 地址和域名 之间的转换服务的服务器。</p><p> 注意： ① 单纯使用 IP 地址，互联网中的电脑也能够正常工作。但是有了域名的加持，能让互联网的世界变得更加方便。 ② 在开发测试期间， 127.0.0.1 对应的域名是 localhost，它们都代表我们自己的这台电脑，在使用效果上没有任何区别</p></li><li><p>端口号</p></li></ol><p>   计算机中的端口号，就好像是现实生活中的门牌号一样。通过门牌号，外卖小哥可以在整栋大楼众多的房间中，准确把外卖 送到你的手中。 同样的道理，在一台电脑中，可以运行成百上千个 web 服务。每个 web 服务都对应一个唯一的端口号。客户端发送过来的 网络请求，通过端口号，可以被准确地交给对应的 web 服务进行处理。</p><p>   注意：① 每个端口号不能同时被多个 web 服务占用。 ② 在实际应用中，URL 中的 80 端口可以被省略。</p><p>   <img src="https://s2.loli.net/2022/06/15/KsFpXUaJTjyPAqv.png" alt="image-20220615210832454"></p><h3 id="4-4-创建最基本的-web-服务器"><a href="#4-4-创建最基本的-web-服务器" class="headerlink" title="4.4 创建最基本的 web 服务器"></a>4.4 创建最基本的 web 服务器</h3><p>① 导入 http 模块 </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span> <span class="token string">' http '</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>② 创建 web 服务器实例 </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>③ 为服务器实例绑定 request 事件，监听客户端的请求</p><pre class="line-numbers language-js"><code class="language-js">server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Someone visit our web server.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> ④ 启动服务器</p><pre class="line-numbers language-js"><code class="language-js">server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server running at http://127.0.0.1:8080'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>1.req 请求对象</p><p><img src="https://s2.loli.net/2022/06/15/SofNUXc5kLWOTMw.png" alt="image-20220615211402991"></p><p>2.res 响应对象</p><p><img src="https://s2.loli.net/2022/06/15/mWcl8JuonGV1q6i.png" alt="image-20220615211554596"></p><p>3.<strong>当调用 res.end() 方法，向客户端发送中文内容的时候，会出现乱码问题，此时，需要手动设置内容的编码格式</strong>：</p><p><img src="https://s2.loli.net/2022/06/15/qvckMs7g38eHLhB.png" alt="image-20220615211233054"></p><p> 案例 - 实现 clock 时钟的 web 服务器:</p><p><img src="https://s2.loli.net/2022/06/15/IXzQPa4pnjrAeH8.png" alt="image-20220615211711628"></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.1 导入 http 模块</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1.2 导入 fs 模块</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1.3 导入 path 模块</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2.1 创建 web 服务器</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2.2 监听 web 服务器的 request 事件</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 3.1 获取到客户端请求的 URL 地址</span>  <span class="token comment" spellcheck="true">//     /clock/index.html</span>  <span class="token comment" spellcheck="true">//     /clock/index.css</span>  <span class="token comment" spellcheck="true">//     /clock/index.js</span>  <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url  <span class="token comment" spellcheck="true">// 3.2 把请求的 URL 地址映射为具体文件的存放路径</span>  <span class="token comment" spellcheck="true">// const fpath = path.join(__dirname, url)</span>  <span class="token comment" spellcheck="true">// 5.1 预定义一个空白的文件存放路径</span>  <span class="token keyword">let</span> fpath <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fpath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./clock/index.html'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//     /index.html</span>    <span class="token comment" spellcheck="true">//     /index.css</span>    <span class="token comment" spellcheck="true">//     /index.js</span>    fpath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'/clock'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 4.1 根据“映射”过来的文件路径读取文件的内容</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fpath<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> dataStr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 4.2 读取失败，向客户端响应固定的“错误消息”</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not found.'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 4.3 读取成功，将读取成功的内容，响应给客户端</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2.3 启动服务器</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server running at http://127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6语法</title>
      <link href="/2022/061436266.html"/>
      <url>/2022/061436266.html</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>能够说出使用let关键字声明变量的特点</li><li>能够使用解构赋值从数组中提取值</li><li>能够说出箭头函数拥有的特性</li><li>能够使用剩余参数接收剩余的函数参数</li><li>能够使用拓展运算符拆分数组</li><li>能够说出模板字符串拥有的特性</li></ul><h2 id="ES6相关概念（★★）"><a href="#ES6相关概念（★★）" class="headerlink" title="ES6相关概念（★★）"></a>ES6相关概念（★★）</h2><h3 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="什么是ES6"></a>什么是ES6</h3><p>ES 的全称是 ECMAScript , 它是由 ECMA 国际标准化组织,制定的一项脚本语言的标准化规范。</p><p><img src="https://s2.loli.net/2022/06/14/hCnKsPue1RZAUtz.png"></p><h3 id="为什么使用-ES6"><a href="#为什么使用-ES6" class="headerlink" title="为什么使用 ES6 ?"></a>为什么使用 ES6 ?</h3><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript语言本身也有一些令人不满意的地方。</p><ul><li>变量提升特性增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li></ul><h2 id="ES6新增语法"><a href="#ES6新增语法" class="headerlink" title="ES6新增语法"></a>ES6新增语法</h2><h3 id="let（★★★）"><a href="#let（★★★）" class="headerlink" title="let（★★★）"></a>let（★★★）</h3><p>ES6中新增了用于声明变量的关键字</p><h4 id="let声明的变量只在所处于的块级有效"><a href="#let声明的变量只在所处于的块级有效" class="headerlink" title="let声明的变量只在所处于的块级有效"></a>let声明的变量只在所处于的块级有效</h4><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// a is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>使用let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域特性。</p><h4 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h4><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a is not defined </span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>利用let声明的变量会绑定在这个块级作用域，不会受外界的影响</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      tmp <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> tmp<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/06/14/iGCanju7gtvxqIV.png"></p><p><strong>经典面试题图解：</strong>此题的关键点在于变量i是全局的，函数执行时输出的都是全局作用域下的i值。</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/06/14/p6ViBcemhsGybZz.png"></p><p><strong>经典面试题图解：</strong>此题的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的i值.</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>let关键字就是用来声明变量的</li><li>使用let关键字声明的变量具有块级作用域</li><li>在一个大括号中 使用let关键字声明的变量才具有块级作用域 var关键字是不具备这个特点的</li><li>防止循环变量变成全局变量</li><li>使用let关键字声明的变量没有变量提升</li><li>使用let关键字声明的变量具有暂时性死区特性</li></ul><h3 id="const（★★★）"><a href="#const（★★★）" class="headerlink" title="const（★★★）"></a>const（★★★）</h3><p>声明常量，常量就是值（内存地址）不能变化的量</p><h4 id="具有块级作用域"><a href="#具有块级作用域" class="headerlink" title="具有块级作用域"></a>具有块级作用域</h4><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// a is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="声明常量时必须赋值"><a href="#声明常量时必须赋值" class="headerlink" title="声明常量时必须赋值"></a>声明常量时必须赋值</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PI<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Missing initializer in const declaration</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="常量赋值后，值不能修改"><a href="#常量赋值后，值不能修改" class="headerlink" title="常量赋值后，值不能修改"></a>常量赋值后，值不能修改</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>PI <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Assignment to constant variable.</span><span class="token keyword">const</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>ary<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['a', 'b']; </span>ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Assignment to constant variable.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul><li>const声明的变量是一个常量</li><li>既然是常量不能重新进行赋值，如果是基本数据类型，不能更改值，如果是复杂数据类型，不能更改地址值</li><li>声明 const时候必须要给定值</li></ul><h3 id="let、const、var-的区别"><a href="#let、const、var-的区别" class="headerlink" title="let、const、var 的区别"></a>let、const、var 的区别</h3><ul><li>使用 var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象</li><li>使用 let 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升</li><li>使用 const 声明的是常量，在后面出现的代码中不能再修改该常量的值</li></ul><p><img src="https://s2.loli.net/2022/06/14/5yZuoJIp6zX7aOs.png"></p><h3 id="解构赋值（★★★）"><a href="#解构赋值（★★★）" class="headerlink" title="解构赋值（★★★）"></a>解构赋值（★★★）</h3><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//3</span><span class="token comment" spellcheck="true">//如果解构不成功，变量的值为undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'zhangsan' </span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span> <span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> myName<span class="token punctuation">,</span> age<span class="token punctuation">:</span> myAge<span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// myName myAge 属于别名</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'zhangsan' </span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myAge<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul><li>解构赋值就是把数据结构分解，然后给变量进行赋值</li><li>如果结构不成功，变量跟数值个数不匹配的时候，变量的值为undefined</li><li>数组解构用中括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用逗号隔开</li><li>利用解构赋值能够让我们方便的去取对象中的属性跟方法</li></ul><h3 id="箭头函数（★★★）"><a href="#箭头函数（★★★）" class="headerlink" title="箭头函数（★★★）"></a>箭头函数（★★★）</h3><p>ES6中新增的定义函数的方式。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//()：代表是函数； =>：必须要的符号，指向哪一个代码块；{}：函数体</span><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代表把一个函数赋值给fn</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//es6写法</span> <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果形参只有一个，可以省略小括号</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">function</span> fn <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> v<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//es6写法</span> <span class="token keyword">const</span> fn <span class="token operator">=</span> v <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>箭头函数不绑定this关键字，箭头函数中的this，指向的是函数定义位置的上下文this</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">}</span>  <span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this 指向 是obj对象</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this 指向 的是箭头函数定义的位置，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> resFn <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><ul><li>箭头函数中不绑定this，箭头函数中的this指向是它所定义的位置，可以简单理解成，定义箭头函数中的作用域的this指向谁，它就指向谁</li><li>箭头函数的优点在于解决了this执行环境所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeout和setInterval中使用this所造成的问题</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    say<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//箭头函数this指向的是被声明的作用域里面，而对象没有作用域的，所以箭头函数虽然在对象中被定义，但是this指向的是全局作用域</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剩余参数（★★）"><a href="#剩余参数（★★）" class="headerlink" title="剩余参数（★★）"></a>剩余参数（★★）</h3><p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组，不定参数定义方式，这种方式很方便的去声明不知道参数情况下的一个函数</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> sum <span class="token punctuation">(</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [20, 30] </span> <span class="token punctuation">}</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="剩余参数和解构配合使用"><a href="#剩余参数和解构配合使用" class="headerlink" title="剩余参数和解构配合使用"></a>剩余参数和解构配合使用</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'wangwu'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'lisi'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>s1<span class="token punctuation">,</span> <span class="token operator">...</span>s2<span class="token punctuation">]</span> <span class="token operator">=</span> students<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 'wangwu' </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ['zhangsan', 'lisi']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ES6-的内置对象扩展"><a href="#ES6-的内置对象扩展" class="headerlink" title="ES6 的内置对象扩展"></a>ES6 的内置对象扩展</h2><h3 id="Array-的扩展方法（★★）"><a href="#Array-的扩展方法（★★）" class="headerlink" title="Array 的扩展方法（★★）"></a>Array 的扩展方法（★★）</h3><h4 id="扩展运算符（展开语法）"><a href="#扩展运算符（展开语法）" class="headerlink" title="扩展运算符（展开语法）"></a>扩展运算符（展开语法）</h4><p>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">...</span>ary  <span class="token comment" spellcheck="true">// 1, 2, 3</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1 2 3,相当于下面的代码</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="扩展运算符可以应用于合并数组"><a href="#扩展运算符可以应用于合并数组" class="headerlink" title="扩展运算符可以应用于合并数组"></a>扩展运算符可以应用于合并数组</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 方法一 </span> <span class="token keyword">let</span> ary1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> ary2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> ary3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>ary1<span class="token punctuation">,</span> <span class="token operator">...</span>ary2<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方法二 </span> ary1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>ary2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="将类数组或可遍历对象转换为真正的数组"><a href="#将类数组或可遍历对象转换为真正的数组" class="headerlink" title="将类数组或可遍历对象转换为真正的数组"></a>将类数组或可遍历对象转换为真正的数组</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> oDivs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> oDivs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>oDivs<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="构造函数方法：Array-from"><a href="#构造函数方法：Array-from" class="headerlink" title="构造函数方法：Array.from()"></a>构造函数方法：Array.from()</h4><p>将伪数组或可遍历对象转换为真正的数组</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//定义一个集合</span><span class="token keyword">let</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>    <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>    <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>    length<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//转成数组</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['a', 'b', 'c']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">"0"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>     <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>     <span class="token string">"length"</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token keyword">let</span> newAry <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">,</span> item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[2,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：如果是对象，那么属性需要写对应的索引</p><h4 id="实例方法：find"><a href="#实例方法：find" class="headerlink" title="实例方法：find()"></a>实例方法：find()</h4><p>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>     id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>     name<span class="token punctuation">:</span> <span class="token string">'张三'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>     name<span class="token punctuation">:</span> <span class="token string">'李四'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> target <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找数组里面符合条件的值，当数组中元素id等于2的查找出来，注意，只会匹配第一个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实例方法：findIndex"><a href="#实例方法：findIndex" class="headerlink" title="实例方法：findIndex()"></a>实例方法：findIndex()</h4><p>用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> index <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> value <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="实例方法：includes"><a href="#实例方法：includes" class="headerlink" title="实例方法：includes()"></a>实例方法：includes()</h4><p>判断某个数组是否包含给定的值，返回布尔值。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true </span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="String-的扩展方法"><a href="#String-的扩展方法" class="headerlink" title="String 的扩展方法"></a>String 的扩展方法</h3><h4 id="模板字符串（★★★）"><a href="#模板字符串（★★★）" class="headerlink" title="模板字符串（★★★）"></a>模板字符串（★★★）</h4><p>ES6新增的创建字符串的方式，使用反引号定义</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token template-string"><span class="token string">`zhangsan`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="模板字符串中可以解析变量"><a href="#模板字符串中可以解析变量" class="headerlink" title="模板字符串中可以解析变量"></a>模板字符串中可以解析变量</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> sayHello <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hello,my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hello, my name is zhangsan</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="模板字符串中可以换行"><a href="#模板字符串中可以换行" class="headerlink" title="模板字符串中可以换行"></a>模板字符串中可以换行</h5><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span>      age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>     sex<span class="token punctuation">:</span> <span class="token string">'男'</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token string">` &lt;div>     &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>     &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>     &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span> &lt;/div> `</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="在模板字符串中可以调用函数"><a href="#在模板字符串中可以调用函数" class="headerlink" title="在模板字符串中可以调用函数"></a>在模板字符串中可以调用函数</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> sayHello <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token string">'哈哈哈哈 追不到我吧 我就是这么强大'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> greet <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 哈哈哈哈`</span></span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 哈哈哈哈 追不到我吧 我就是这么强大 哈哈哈哈</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实例方法：startsWith-和-endsWith"><a href="#实例方法：startsWith-和-endsWith" class="headerlink" title="实例方法：startsWith() 和 endsWith()"></a>实例方法：startsWith() 和 endsWith()</h4><ul><li>startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</li><li>endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true </span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="实例方法：repeat"><a href="#实例方法：repeat" class="headerlink" title="实例方法：repeat()"></a>实例方法：repeat()</h4><p>repeat方法表示将原字符串重复n次，返回一个新字符串</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">'x'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// "xxx" </span><span class="token string">'hello'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// "hellohello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Set-数据结构（★★）"><a href="#Set-数据结构（★★）" class="headerlink" title="Set 数据结构（★★）"></a>Set 数据结构（★★）</h3><p>ES6 提供了新的数据结构  Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set本身是一个构造函数，用来生成  Set  数据结构</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Set函数可以接受一个数组作为参数，用来初始化。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{1, 2, 3, 4}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ul><li>add(value)：添加某个值，返回 Set 结构本身</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</li><li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员</li><li>clear()：清除所有成员，没有返回值</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 向 set 结构中添加值 </span> s<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 删除 set 结构中的2值   </span> s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 表示 set 结构中是否有1这个值 返回布尔值 </span> s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">// 清除 set 结构中的所有值</span> <span class="token comment" spellcheck="true">//注意：删除的是元素的值，不是代表的索引</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。</p><pre class="line-numbers language-javascript"><code class="language-javascript">s<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript面向过程和面向对象</title>
      <link href="/2022/061439799.html"/>
      <url>/2022/061439799.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-面向过程与面向对象"><a href="#1-面向过程与面向对象" class="headerlink" title="1.面向过程与面向对象"></a>1.面向过程与面向对象</h2><h3 id="1-1面向过程"><a href="#1-1面向过程" class="headerlink" title="1.1面向过程"></a>1.1面向过程</h3><ul><li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。</li></ul><h3 id="1-2面向对象"><a href="#1-2面向对象" class="headerlink" title="1.2面向对象"></a>1.2面向对象</h3><ul><li>面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。</li></ul><h3 id="1-3面向过程与面向对象对比"><a href="#1-3面向过程与面向对象对比" class="headerlink" title="1.3面向过程与面向对象对比"></a>1.3面向过程与面向对象对比</h3><table><thead><tr><th></th><th>面向过程</th><th>面向对象</th></tr></thead><tbody><tr><td>优点</td><td>性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。</td><td>易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护</td></tr><tr><td>缺点</td><td>不易维护、不易复用、不易扩展</td><td>性能比面向过程低</td></tr></tbody></table><h2 id="2-对象与类"><a href="#2-对象与类" class="headerlink" title="2.对象与类"></a>2.对象与类</h2><h3 id="2-1对象"><a href="#2-1对象" class="headerlink" title="2.1对象"></a>2.1对象</h3><p>对象是由属性和方法组成的：是一个无序键值对的集合,指的是一个具体的事物</p><ul><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li><li>方法：事物的行为，在对象中用方法来表示（常用动词）</li></ul><h4 id="2-1-1创建对象"><a href="#2-1-1创建对象" class="headerlink" title="2.1.1创建对象"></a>2.1.1创建对象</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//以下代码是对对象的复习</span><span class="token comment" spellcheck="true">//字面量创建对象</span><span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'刘德华'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构造函数创建对象</span>  <span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//实例化对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上两行代码运行结果为:<img src="https://s2.loli.net/2022/06/14/HyvQt69LuaoSNMc.png"></p><h3 id="2-2类"><a href="#2-2类" class="headerlink" title="2.2类"></a>2.2类</h3><ul><li>在 ES6 中新增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类来实例化对象。类抽象了对象的公共部分，它泛指某一大类（class）对象特指某一个，通过类实例化一个具体的对象</li></ul><h4 id="2-2-1创建类"><a href="#2-2-1创建类" class="headerlink" title="2.2.1创建类"></a>2.2.1创建类</h4><ol><li>语法:</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//步骤1 使用class关键字</span><span class="token keyword">class</span> <span class="token class-name">name</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// class body</span><span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//步骤2使用定义的类创建实例  注意new关键字</span><span class="token keyword">var</span> xx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>示例</li></ol><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 1. 创建类 class  创建一个 明星类</span> <span class="token keyword">class</span> <span class="token class-name">Star</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 类的共有属性放到 constructor 里面</span>   <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 2. 利用类创建对象 new</span>   <span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码运行结果: </p><p><img src="https://s2.loli.net/2022/06/14/bIi7MB9fdHrx6VX.png"></p><p>通过结果我们可以看出,运行结果和使用构造函数方式一样</p><h4 id="2-2-2类创建添加属性和方法"><a href="#2-2-2类创建添加属性和方法" class="headerlink" title="2.2.2类创建添加属性和方法"></a>2.2.2类创建添加属性和方法</h4><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 1. 创建类 class  创建一个类</span><span class="token keyword">class</span> <span class="token class-name">Star</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 类的共有属性放到 constructor 里面 constructor是 构造器或者构造函数</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//------------------------------------------->注意,方法与方法之间不需要添加逗号</span>    <span class="token function">sing</span><span class="token punctuation">(</span>song<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">+</span> <span class="token string">'唱'</span> <span class="token operator">+</span> song<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2. 利用类创建对象 new</span><span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Star {uname: "刘德华", age: 18}</span>ldh<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token string">'冰雨'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 刘德华唱冰雨</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 以上代码运行结果:</p><p><img src="https://s2.loli.net/2022/06/14/u9gdQzxmYUBXRTb.png"></p><p><strong>注意哟:</strong></p><ol><li>通过class 关键字创建类, 类名我们还是习惯性定义首字母大写</li><li>类里面有个constructor 函数,可以接受传递过来的参数,同时返回实例对象</li><li>constructor 函数 只要 new 生成实例时,就会自动调用这个函数, 如果我们不写这个函数,类也会自动生成这个函数</li><li>多个函数方法之间不需要添加逗号分隔</li><li>生成实例 new 不能省略</li><li>语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加function</li></ol><h4 id="2-2-3类的继承"><a href="#2-2-3类的继承" class="headerlink" title="2.2.3类的继承"></a>2.2.3类的继承</h4><ol><li>语法</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 父类</span><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>   <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 子类继承父类</span><span class="token keyword">class</span>  <span class="token class-name">Son</span>  <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>示例</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>      <span class="token function">constructor</span><span class="token punctuation">(</span>surname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token operator">=</span> surname<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你的姓是'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这样子类就继承了父类的属性和方法</span><span class="token punctuation">}</span><span class="token keyword">var</span> damao<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">'刘'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>damao<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//结果为 你的姓是刘</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码运行结果:</p><p><img src="https://s2.loli.net/2022/06/14/1K4LHzdVGICExvw.png"></p><ul><li><p>子类使用super关键字访问父类的方法</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义了父类</span><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>   <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//子元素继承父类</span>    <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>            <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用super调用了父类中的构造函数</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    son<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果为3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意:</strong> </p><ol><li><p>继承中,如果实例化子类输出一个方法,先看子类有没有这个方法,如果有就先执行子类的</p></li><li><p>继承中,如果子类里面没有,就去查找父类有没有这个方法,如果有,就执行父类的这个方法(就近原则)</p></li><li><p>如果子类想要继承父类的方法,同时在自己内部扩展自己的方法,利用super 调用父类的构造函数,super 必须在子类this之前调用</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 父类有加法方法</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>   <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 子类继承父类加法方法 同时 扩展减法方法</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>   <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 利用super 调用父类的构造函数 super 必须在子类this之前调用,放到this之后会报错</span>   <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>son<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>son<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码运行结果为:</p><p><img src="https://s2.loli.net/2022/06/14/UtZjX41qckI7ze9.png"></p></li><li><p>时刻注意this的指向问题,类里面的共有的属性和方法一定要加this使用.</p><ol><li>constructor中的this指向的是new出来的实例对象 </li><li>自定义的方法,一般也指向的new出来的实例对象</li><li>绑定事件之后this指向的就是触发事件的事件源</li></ol></li><li><p>在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象<img src="https://s2.loli.net/2022/06/14/p2xsnoO3Mct9CHB.png"></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://s2.loli.net/2022/06/14/NVoYwryWKUmH5O1.png"></h2></li></ol></li></ul><h2 id="3-面向对象版tab-栏切换"><a href="#3-面向对象版tab-栏切换" class="headerlink" title="3.面向对象版tab 栏切换"></a>3.面向对象版tab 栏切换</h2><h3 id="3-1功能需求"><a href="#3-1功能需求" class="headerlink" title="3.1功能需求"></a>3.1功能需求</h3><ol><li>点击 tab栏,可以切换效果.</li><li>点击 + 号, 可以添加 tab 项和内容项.</li><li>点击 x 号, 可以删除当前的tab项和内容项.</li><li>双击tab项文字或者内容项文字可以修改里面的文字内容</li></ol><h3 id="3-2案例准备"><a href="#3-2案例准备" class="headerlink" title="3.2案例准备"></a>3.2案例准备</h3><ol><li>获取到标题元素</li><li>获取到内容元素</li><li>获取到删除的小按钮 x号</li><li>新建js文件,定义类,添加需要的属性方法(切换,删除,增加,修改)</li><li>时刻注意this的指向问题</li></ol><h3 id="3-3切换"><a href="#3-3切换" class="headerlink" title="3.3切换"></a>3.3切换</h3><ul><li><p>为获取到的标题绑定点击事件,展示对应的内容区域,存储对应的索引</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">this</span><span class="token punctuation">.</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>toggleTab<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用排他,实现只有一个元素的显示</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token function">toggleTab</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//将所有的标题与内容类样式全部移除</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>sections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//为当前的标题添加激活样式</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'liactive'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//为当前的内容添加激活样式</span>     that<span class="token punctuation">.</span>sections<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'conactive'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-4添加"><a href="#3-4添加" class="headerlink" title="3.4添加"></a>3.4添加</h3><ul><li><p>为添加按钮+ 绑定点击事件 </p><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">this</span><span class="token punctuation">.</span>add<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>addTab<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>实现标题与内容的添加,做好排他处理</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">addTab</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    that<span class="token punctuation">.</span><span class="token function">clearClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// (1) 创建li元素和section元素 </span>    <span class="token keyword">var</span> random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> li <span class="token operator">=</span> <span class="token string">'&lt;li class="liactive">&lt;span>新选项卡&lt;/span>&lt;span class="iconfont icon-guanbi">&lt;/span>&lt;/li>'</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> section <span class="token operator">=</span> <span class="token string">'&lt;section class="conactive">测试 '</span> <span class="token operator">+</span> random <span class="token operator">+</span> <span class="token string">'&lt;/section>'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// (2) 把这两个元素追加到对应的父元素里面</span>    that<span class="token punctuation">.</span>ul<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">'beforeend'</span><span class="token punctuation">,</span> li<span class="token punctuation">)</span><span class="token punctuation">;</span>    that<span class="token punctuation">.</span>fsection<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">'beforeend'</span><span class="token punctuation">,</span> section<span class="token punctuation">)</span><span class="token punctuation">;</span>    that<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-5删除"><a href="#3-5删除" class="headerlink" title="3.5删除"></a>3.5删除</h3><ul><li><p>为元素的删除按钮x绑定点击事件</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">this</span><span class="token punctuation">.</span>remove<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>removeTab<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取到点击的删除按钮的所在的父元素的所有,删除对应的标题与内容</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token function">removeTab</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 阻止冒泡 防止触发li 的切换点击事件</span>     <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>index<span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 根据索引号删除对应的li 和section   remove()方法可以直接删除指定的元素</span>     that<span class="token punctuation">.</span>lis<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     that<span class="token punctuation">.</span>sections<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     that<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 当我们删除的不是选中状态的li 的时候,原来的选中状态li保持不变</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.liactive'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 当我们删除了选中状态的这个li 的时候, 让它的前一个li 处于选定状态</span>     index<span class="token operator">--</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 手动调用我们的点击事件  不需要鼠标触发</span>     that<span class="token punctuation">.</span>lis<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> that<span class="token punctuation">.</span>lis<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-6编辑"><a href="#3-6编辑" class="headerlink" title="3.6编辑"></a>3.6编辑</h3><ul><li><p>为元素(标题与内容)绑定双击事件</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">this</span><span class="token punctuation">.</span>spans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ondblclick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>editTab<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ondblclick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>editTab<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在双击事件处理文本选中状态,修改内部DOM节点,实现新旧value值的传递</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">editTab</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 双击禁止选定文字</span>    window<span class="token punctuation">.</span>getSelection <span class="token operator">?</span> window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAllRanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>     document<span class="token punctuation">.</span>selection<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// alert(11);</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;input type="text" />'</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> input <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      input<span class="token punctuation">.</span>value <span class="token operator">=</span> str<span class="token punctuation">;</span>      input<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文本框里面的文字处于选定状态</span>      <span class="token comment" spellcheck="true">// 当我们离开文本框就把文本框里面的值给span </span>      input<span class="token punctuation">.</span>onblur <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 按下回车也可以把文本框里面的值给span</span>      input<span class="token punctuation">.</span>onkeyup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 手动调用表单失去焦点事件  不需要鼠标离开操作</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 面向过程和面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascriptDOM操作</title>
      <link href="/2022/061426794.html"/>
      <url>/2022/061426794.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-获取元素的方法"><a href="#1-获取元素的方法" class="headerlink" title="1. 获取元素的方法"></a>1. 获取元素的方法</h4><ol><li><p>根据 ID 获取：</p><ul><li>document.getElementById(‘id’);</li></ul></li><li><p>根据标签名获取：</p><ul><li>document.getElementsByTagName(‘标签名’);</li></ul></li><li><p>通过 HTML5 新增的方法获取：</p><ol><li><p>document.getElementsByClassName(‘类名’)；&#x2F;&#x2F; 根据类名返回元素对象集</p></li><li><p>document.querySelector(‘选择器’);        &#x2F;&#x2F; 根据指定选择器返回第一个元素对象</p></li><li><p>document.querySelectorAll(‘选择器’);     &#x2F;&#x2F; 根据指定选择器返回</p></li></ol></li><li><p>获取特殊元素（body，html):</p><ol><li><p>doucumnet.body  &#x2F;&#x2F; 返回body元素对象</p></li><li><p>document.documentElement  &#x2F;&#x2F; 返回html元素对象</p></li></ol></li></ol><hr><h4 id="2-事件基础"><a href="#2-事件基础" class="headerlink" title="2.事件基础"></a>2.事件基础</h4><ol><li>常见的鼠标事件:<br>  <img src="https://s2.loli.net/2022/06/14/qvPuRSIY3DjmLJT.png"></li></ol><hr><h4 id="3-操作元素"><a href="#3-操作元素" class="headerlink" title="3.操作元素"></a>3.操作元素</h4><ol><li>改变元素内容:<ol><li><p>element.innerText        &#x2F;&#x2F;从起始位置到终止位置的内容, 但它去除 html 标签， 同时空格和换行也会去掉</p></li><li><p>element.innerHTML    &#x2F;&#x2F;起始位置到终止位置的全部内容，包括 html 标签，同时保留空格和换行</p></li></ol></li><li>样式属性操作:<ol><li>element.style     行内样式操作</li><li>element.className 类名样式操作</li></ol></li></ol><p>3.操作元素总结</p><p><img src="https://s2.loli.net/2022/06/14/CViom5W1hFHlN27.png"></p><ol start="4"><li><p>自定义属性的操作</p><ol><li><p>设置属性值<br>   element.属性 &#x3D; ‘值’  设置内置属性值。<br>   element.setAttribute(‘属性’, ‘值’); </p></li><li><p>区别<br>   element.属性  设置内置属性值<br>   element.setAttribute(‘属性’);  主要设置自定义的属性 （标准）</p></li><li><p>移除属性<br>   element.removeAttribute(‘属性’);</p></li><li><p>获取H5自定义属性</p><p>兼容性获取   element.getAttribute(‘data-index’);</p></li></ol><p>   H5新增 element.dataset.index  或者 element.dataset[‘index’]   ie 11才开始支持</p></li></ol><hr><h4 id="4-节点操作"><a href="#4-节点操作" class="headerlink" title="4.节点操作"></a>4.节点操作</h4><h5 id="1-节点概述"><a href="#1-节点概述" class="headerlink" title="1.节点概述"></a>1.节点概述</h5><p>一般地，节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性。</p><ul><li><p>元素节点  nodeType  为 1</p></li><li><p>属性节点  nodeType  为 2</p></li><li><p>文本节点  nodeType  为 3 （文本节点包含文字、空格、换行等）</p></li></ul><h5 id="2-节点层级"><a href="#2-节点层级" class="headerlink" title="2.节点层级"></a>2.节点层级</h5><h6 id="1-父级节点"><a href="#1-父级节点" class="headerlink" title="1. 父级节点"></a>1. 父级节点</h6><p>   node.parentNode  </p><ul><li><p>parentNode 属性可返回某节点的父节点，注意是最近的一个父节点</p></li><li><p>如果指定的节点没有父节点则返回 null</p></li></ul><h6 id="2-子节点"><a href="#2-子节点" class="headerlink" title="2.子节点"></a>2.子节点</h6><ol><li>parentNode.childNodes（标准）</li></ol><ul><li>parentNode.childNodes 返回包含指定节点的子节点的集合，该集合为即时更新的集合。注意：返回值里面包含了所有的子节点，包括元素节点，文本节点等。如果只想要获得里面的元素节点，则需要专门处理。 所以我们一般不提倡使用childNodes</li></ul><ol start="2"><li>parentNode.children（非标准）</li></ol><ul><li>parentNode.children 是一个只读属性，返回所有的子元素节点。它只返回子元素节点，其余节点不返回 （这个是我们重点掌握的）。虽然children 是一个非标准，但是得到了各个浏览器的支持，因此我们可以放心使用</li></ul><ol start="3"><li>parentNode.firstChild</li></ol><ul><li>firstChild 返回第一个子节点，找不到则返回null。同样，也是包含所有的节点。</li></ul><p>4.parentNode.lastChild</p><ul><li>lastChild 返回最后一个子节点，找不到则返回null。同样，也是包含所有的节点。</li></ul><p>5.parentNode.firstElementChild   </p><ul><li>firstElementChild  返回第一个子元素节点，找不到则返回null。</li></ul><ol start="6"><li>parentNode.lastElementChild</li></ol><ul><li>lastElementChild 返回最后一个子元素节点，找不到则返回null。</li></ul><pre class="line-numbers language-tex"><code class="language-tex">总结：实际开发中，firstChild 和 lastChild 包含其他节点，操作不方便，而 firstElementChild 和 lastElementChild 又有兼容性问题，那么我们如何获取第一个子元素节点或最后一个子元素节点呢？解决方案：1.如果想要第一个子元素节点，可以使用 parentNode.chilren[0] 2.如果想要最后一个子元素节点，可以使用 parentNode.chilren[parentNode.chilren.length - 1] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-兄弟节点"><a href="#3-兄弟节点" class="headerlink" title="3. 兄弟节点"></a>3. 兄弟节点</h6><p>   1.node.nextElementSibling  &#x2F;&#x2F;nextElementSibling 返回当前元素下一个兄弟元素节点，找不到则返回null。 </p><p>   2.node.previousElementSibling    &#x2F;&#x2F;previousElementSibling 返回当前元素上一个兄弟节点，找不到则返回null。 </p><h6 id="4-创建节点"><a href="#4-创建节点" class="headerlink" title="4.创建节点"></a>4.创建节点</h6><ol><li><p>document.createElement(‘tagName’)</p><p>document.createElement() 方法创建由 tagName 指定的 HTML 元素。因为这些元素原先不存在，是根据我们的需求动态生成的，所以我们也称为动态创建元素节点。</p></li></ol><h6 id="5-添加节点"><a href="#5-添加节点" class="headerlink" title="5.添加节点"></a>5.添加节点</h6><ol><li><p>node.appendChild(child) </p><p>node.appendChild() 方法将一个节点添加到指定父节点的子节点列表末尾。类似于 CSS 里面的 after 伪元素。</p></li></ol><p>2.node.insertBefore(child, 指定元素) </p><p>node.insertBefore() 方法将一个节点添加到父节点的指定子节点前面。类似于 CSS 里面的 before 伪元素。</p><p><strong>3.node.insertAdjacentHTML(‘’)</strong></p><p><strong>insertAdjacentHTML()</strong> 方法将指定的文本解析为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element"><code>Element</code></a> 元素，并将结果节点插入到DOM树中的指定位置。它不会重新解析它正在使用的元素，因此它不会破坏元素内的现有元素。这避免了额外的序列化步骤，使其比直接使用innerHTML操作更快。</p><pre class="line-numbers language-tex"><code class="language-tex">element.insertAdjacentHTML(position, text);position一个 DOMString，表示插入内容相对于元素的位置，并且必须是以下字符串之一：'beforebegin'：元素自身的前面。'afterbegin'：插入元素内部的第一个子节点之前。'beforeend'：插入元素内部的最后一个子节点之后。'afterend'：元素自身的后面。text是要被解析为HTML或XML元素，并插入到DOM树中的 DOMString。使用 insertAdjacentHTML 插入用户输入的HTML内容的时候，需要转义之后才能使用。如果只是为了插入文本内容（而不是HTML节点），不建议使用这个方法，建议使用node.textContent 或者 node.insertAdjacentText()。因为这样不需要经过HTML解释器的转换，性能会好一点。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">//示例// 原为 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>var d1 = document.getElementById('one');d1.insertAdjacentHTML('afterend', '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>');// 此时，新结构变成：// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>位置可视化 </p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- beforebegin --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- afterbegin --></span>  foo  <span class="token comment" spellcheck="true">&lt;!-- beforeend --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- afterend --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="6-删除节点"><a href="#6-删除节点" class="headerlink" title="6.删除节点"></a>6.删除节点</h6><p>1.node.removeChild(child) </p><p>node.removeChild() 方法从 DOM 中删除一个子节点，返回删除的节点。</p><p>2.node.remove()&#x2F;&#x2F;删除节点本身</p><h6 id="7-复制节点-克隆节点"><a href="#7-复制节点-克隆节点" class="headerlink" title="7.复制节点(克隆节点)"></a>7.复制节点(克隆节点)</h6><p> 1.node.cloneNode() </p><p>node.cloneNode() 方法返回调用该方法的节点的一个副本。 也称为克隆节点&#x2F;拷贝节点</p><p>注意：1. 如果括号参数为空或者为 false ，则是浅拷贝，即只克隆复制节点本身，不克隆里面的子节点。2. 如果括号参数为 true ，则是深度拷贝，会复制节点本身以及里面所有的子节点。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> DOM操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascriptBOM操作</title>
      <link href="/2022/061451329.html"/>
      <url>/2022/061451329.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-什么是-BOM"><a href="#1-什么是-BOM" class="headerlink" title="1.什么是 BOM"></a>1.什么是 BOM</h4><p>​     BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window。BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性。BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C，BOM 最初是Netscape 浏览器标准的一部分。</p><p>浏览器对象模型</p><ul><li><p>把「浏览器」当做一个「对象」来看待</p></li><li><p>BOM 的顶级对象是 window</p></li><li><p>BOM 学习的是浏览器窗口交互的一些对象</p></li><li><p>BOM 是浏览器厂商在各自浏览器上定义的，兼容性较差</p></li></ul><h4 id="2-BOM-的构成"><a href="#2-BOM-的构成" class="headerlink" title="2.BOM 的构成"></a>2.BOM 的构成</h4><p><img src="https://s2.loli.net/2022/06/14/pP4QIOrRyjFwLfx.png"></p><p>window 对象是浏览器的顶级对象，它具有双重角色。</p><ol><li>它是 JS 访问浏览器窗口的一个接口。</li><li>它是一个全局对象。定义在全局作用域中的变量、函数都会变成 window 对象的属性和方法。在调用的时候可以省略 window，前面学习的对话框都属于 window 对象方法，如 alert()、prompt() 等。</li><li>注意：window下的一个特殊属性 window.name</li></ol><h4 id="3-window-对象的常见事件"><a href="#3-window-对象的常见事件" class="headerlink" title="3.window 对象的常见事件"></a>3.window 对象的常见事件</h4><h5 id="1-窗口加载事件"><a href="#1-窗口加载事件" class="headerlink" title="1.窗口加载事件"></a>1.窗口加载事件</h5><pre class="line-numbers language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>或者 window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>javs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>window.onload 是窗口 (页面）加载事件,当文档内容完全加载完成会触发该事件(包括图像、脚本文件、CSS 文件等), 就调用的处理函数。</p><p>注意：</p><ol><li><p>有了 window.onload 就可以把 JS 代码写到页面元素的上方，因为 onload 是等页面内容全部加载完毕，再去执行处理函数。</p></li><li><p>window.onload 传统注册事件方式 只能写一次，如果有多个，会以最后一个 window.onload 为准。</p></li><li><p>如果使用 addEventListener 则没有限制.</p></li></ol><pre class="line-numbers language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片，flash等等。</li><li>Ie9以上才支持</li><li>如果页面的图片很多的话, 从用户访问到onload触发可能需要较长的时间, 交互效果就不能实现，必然影响用户的体验，此时用 DOMContentLoaded 事件比较合适。</li></ol><h5 id="2-调整窗口大小事件"><a href="#2-调整窗口大小事件" class="headerlink" title="2.调整窗口大小事件"></a>2.调整窗口大小事件</h5><pre class="line-numbers language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>window.onresize 是调整窗口大小加载事件,  当触发时就调用的处理函数。</p><p>注意：</p><ol><li>只要窗口大小发生像素变化，就会触发这个事件。</li><li>我们经常利用这个事件完成响应式布局。 window.innerWidth 当前屏幕的宽度</li></ol><h4 id="4-定时器"><a href="#4-定时器" class="headerlink" title="4.定时器"></a>4.定时器</h4><h5 id="1-两种定时器"><a href="#1-两种定时器" class="headerlink" title="1.两种定时器"></a>1.两种定时器</h5><p>window 对象给我们提供了 2 个非常好用的方法-定时器。</p><ul><li>setTimeout()  </li><li>setInterval()</li></ul><h5 id="2-setTimeout-定时器"><a href="#2-setTimeout-定时器" class="headerlink" title="2.setTimeout() 定时器"></a>2.setTimeout() 定时器</h5><pre class="line-numbers language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>调用函数<span class="token punctuation">,</span> <span class="token punctuation">[</span>延迟的毫秒数<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>setTimeout() 方法用于设置一个定时器，该定时器在定时器到期后执行调用函数。</p><p>注意：</p><ol><li>window 可以省略。</li><li>这个调用函数可以直接写函数，或者写函数名或者采取字符串‘函数名()’三种形式。第三种不推荐</li><li>延迟的毫秒数省略默认是 0，如果写，必须是毫秒。</li><li>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符。</li></ol><h5 id="3-setTimeout-定时器"><a href="#3-setTimeout-定时器" class="headerlink" title="3.setTimeout() 定时器"></a>3.setTimeout() 定时器</h5><pre class="line-numbers language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>调用函数<span class="token punctuation">,</span> <span class="token punctuation">[</span>延迟的毫秒数<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>setTimeout()  这个调用函数我们也称为回调函数 callback</li><li>普通函数是按照代码顺序直接调用。</li><li>而这个函数，需要等待时间，时间到了才去调用这个函数，因此称为回调函数。</li><li>简单理解： 回调，就是回头调用的意思。上一件事干完，再回头再调用这个函数。</li><li>以前我们讲的   element.onclick &#x3D; function(){}   或者  element.addEventListener(“click”, fn);   里面的 函数也是回调函数。</li></ol><h5 id="4-停止-setTimeout-定时器"><a href="#4-停止-setTimeout-定时器" class="headerlink" title="4.停止 setTimeout() 定时器"></a>4.停止 setTimeout() 定时器</h5><pre class="line-numbers language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutID<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>clearTimeout()方法取消了先前通过调用 setTimeout() 建立的定时器。</p><p>注意：</p><ol><li><p>window 可以省略。</p></li><li><p>里面的参数就是定时器的标识符 。</p></li><li><h5 id="setInterval-定时器"><a href="#setInterval-定时器" class="headerlink" title="setInterval() 定时器"></a>setInterval() 定时器</h5></li></ol><pre class="line-numbers language-js"><code class="language-js">   window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span>回调函数<span class="token punctuation">,</span> <span class="token punctuation">[</span>间隔的毫秒数<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   setInterval() 方法重复调用一个函数，每隔这个时间，就去调用一次回调函数。</p><p>注意：</p><ol><li>window 可以省略。</li><li>这个调用函数可以直接写函数，或者写函数名或者采取字符串 ‘函数名()’  三种形式。</li><li>间隔的毫秒数省略默认是 0，如果写，必须是毫秒，表示每隔多少毫秒就自动调用这个函数。</li><li>4.因为定时器可能有很多，所以我们经常给定时器赋值一个标识符。</li><li>第一次执行也是间隔毫秒数之后执行，之后每隔毫秒数就执行一次。</li></ol><h5 id="4-停止-setInterval-定时器"><a href="#4-停止-setInterval-定时器" class="headerlink" title="4.停止 setInterval() 定时器"></a>4.停止 setInterval() 定时器</h5><pre class="line-numbers language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalID<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>clearInterval()方法取消了先前通过调用 setInterval()建立的定时器。</p><p>注意：</p><ol><li>window 可以省略。</li><li>里面的参数就是定时器的标识符 。</li></ol><h5 id="5-this"><a href="#5-this" class="headerlink" title="5.this"></a>5.this</h5><p>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，一般情况下this的最终指向的是那个调用它的对象</p><p>现阶段，我们先了解一下几个this指向</p><ol><li>全局作用域或者普通函数中this指向全局对象window（注意定时器里面的this指向window）.</li><li>方法调用中谁调用this指向谁.</li><li>构造函数中this指向构造函数的实例.</li></ol><h4 id="5-JS-是单线程"><a href="#5-JS-是单线程" class="headerlink" title="5.JS 是单线程"></a>5.JS 是单线程</h4><p>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。这是因为 Javascript 这门脚本语言诞生的使命所致——JavaScript 是为处理页面中用户的交互，以及操作 DOM 而诞生的。比如我们对某个 DOM 元素进行添加和删除操作，不能同时进行。 应该先进行添加，之后再删除。</p><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</p><h5 id="1-同步和异步"><a href="#1-同步和异步" class="headerlink" title="1.同步和异步"></a>1.同步和异步</h5><p>为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程。于是，JS 中出现了同步和异步。</p><p><strong>同步</strong></p><p>前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步做法：我们要烧水煮饭，等水开了（10分钟之后），再去切菜，炒菜。</p><p><strong>异步</strong></p><p>你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。比如做饭的异步做法，我们在烧水的同时，利用这10分钟，去切菜，炒菜。</p><p><strong>同步任务</strong></p><p>同步任务都在主线程上执行，形成一个执行栈。</p><p><strong>异步任务</strong></p><p>JS 的异步是通过回调函数实现的。<br><img src="https://s2.loli.net/2022/06/14/gikDQP3yKzZAnaq.png"></p><p>一般而言，异步任务有以下三种类型:</p><p>1、普通事件，如 click、resize 等</p><p>2、资源加载，如 load、error 等</p><p>3、定时器，包括 setInterval、setTimeout 等异步任务相关回调函数添加到任务队列中（任务队列也称为消息队列）。</p><h5 id="2-JS-执行机制"><a href="#2-JS-执行机制" class="headerlink" title="2.JS 执行机制"></a>2.JS 执行机制</h5><ol><li><p>先执行执行栈中的同步任务。</p></li><li><p>异步任务（回调函数）放入任务队列中。</p></li><li><p>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</p></li></ol><p><img src="E:\桌面\学习\前端\Javasript\javascript笔记\imges\12.png"></p><p><img src="https://s2.loli.net/2022/06/14/qAZiNuIopjs37eL.png"></p><p>由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环（ event loop）。</p><h4 id="6-什么是-location-对象"><a href="#6-什么是-location-对象" class="headerlink" title="6.什么是 location 对象"></a>6.什么是 location 对象</h4><p>window 对象给我们提供了一个 location 属性用于获取或设置窗体的 URL，并且可以用于解析 URL 。 因为这个属性返回的是一个对象，所以我们将这个属性也称为 location 对象。</p><h5 id="1-URL"><a href="#1-URL" class="headerlink" title="1.URL"></a>1.URL</h5><p>统一资源定位符 (Uniform Resource Locator, URL) 是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p><p>URL 的一般语法格式为：</p><pre class="line-numbers language-tex"><code class="language-tex"> protocol://host[:port]/path/[?query]#fragment http://www.itcast.cn/index.html?name=andy&age=18#link<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/06/14/ox2nN1UXGjD9HWA.png"></p><h5 id="2-location-对象的属性"><a href="#2-location-对象的属性" class="headerlink" title="2.location 对象的属性"></a>2.location 对象的属性</h5><p><img src="https://s2.loli.net/2022/06/14/vA9JhrF2lDREcxq.png"></p><p>重点记住： href 和 search</p><h5 id="3-location-对象的方法"><a href="#3-location-对象的方法" class="headerlink" title="3. location 对象的方法"></a>3. location 对象的方法</h5><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://s2.loli.net/2022/06/14/uGxKdPSYeclrVQz.png"></h5><h4 id="7-navigator-对象"><a href="#7-navigator-对象" class="headerlink" title="7.navigator 对象"></a>7.navigator 对象</h4><p>navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 userAgent，该属性可以返回由客户机发送服务器的 user-agent 头部的值。下面前端代码可以判断用户那个终端打开页面，实现跳转</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//手机</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//电脑</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-history-对象"><a href="#8-history-对象" class="headerlink" title="8.history 对象"></a>8.history 对象</h4><p>window 对象给我们提供了一个 history 对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的 URL。</p><p><img src="https://s2.loli.net/2022/06/14/wp3NQ5JRBZLIu9v.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> BOM操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript正则表达式的用法</title>
      <link href="/2022/061430328.html"/>
      <url>/2022/061430328.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-正则表达式概述"><a href="#1-正则表达式概述" class="headerlink" title="1.正则表达式概述"></a>1.正则表达式概述</h2><h3 id="1-1什么是正则表达式"><a href="#1-1什么是正则表达式" class="headerlink" title="1.1什么是正则表达式"></a>1.1什么是正则表达式</h3><p>正则表达式（ Regular Expression ）是用于匹配字符串中字符组合的模式。在JavaScript中，正则表达式也是对象。</p><p>正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(匹配)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等 。</p><p>其他语言也会使用正则表达式，本阶段我们主要是利用JavaScript 正则表达式完成表单验证。</p><h3 id="1-2-正则表达式的特点"><a href="#1-2-正则表达式的特点" class="headerlink" title="1.2 正则表达式的特点"></a>1.2 正则表达式的特点</h3><ol><li>灵活性、逻辑性和功能性非常的强。</li><li>可以迅速地用极简单的方式达到字符串的复杂控制。</li><li>对于刚接触的人来说，比较晦涩难懂。比如：^\w+([-+.]\w+)*@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$</li><li>实际开发,一般都是直接复制写好的正则表达式. 但是要求会使用正则表达式并且根据实际情况修改正则表达式.   比如用户名:   &#x2F;^[a-z0-9_-]{3,16}$&#x2F;</li></ol><h2 id="2-正则表达式在js中的使用"><a href="#2-正则表达式在js中的使用" class="headerlink" title="2.正则表达式在js中的使用"></a>2.正则表达式在js中的使用</h2><h3 id="2-1正则表达式的创建"><a href="#2-1正则表达式的创建" class="headerlink" title="2.1正则表达式的创建"></a>2.1正则表达式的创建</h3><p>在 JavaScript 中，可以通过两种方式创建一个正则表达式。</p><p>方式一：通过调用RegExp对象的构造函数创建 </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> regexp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token regex">/123/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>方式二：利用字面量创建 正则表达式</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">var</span> rg <span class="token operator">=</span> <span class="token regex">/123/</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2测试正则表达式"><a href="#2-2测试正则表达式" class="headerlink" title="2.2测试正则表达式"></a>2.2测试正则表达式</h3><p>test() 正则对象方法，用于检测字符串是否符合该规则，该对象会返回 true 或 false，其参数是测试字符串。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> rg <span class="token operator">=</span> <span class="token regex">/123/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//匹配字符中是否出现123  出现结果为true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//匹配字符中是否出现123 未出现结果为false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/06/14/CXFspZJSKNlVvjy.png"></p><h2 id="3-正则表达式中的特殊字符"><a href="#3-正则表达式中的特殊字符" class="headerlink" title="3.正则表达式中的特殊字符"></a>3.正则表达式中的特殊字符</h2><h3 id="3-1正则表达式的组成"><a href="#3-1正则表达式的组成" class="headerlink" title="3.1正则表达式的组成"></a>3.1正则表达式的组成</h3><p>一个正则表达式可以由简单的字符构成，比如 &#x2F;abc&#x2F;，也可以是简单和特殊字符的组合，比如 &#x2F;ab*c&#x2F; 。其中特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符号，如 ^ 、$ 、+ 等。</p><p>特殊字符非常多，可以参考： </p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN</a></p><p>jQuery 手册：正则表达式部分</p><p>[正则测试工具]( &lt;<a href="http://tool.oschina.net/regex">http://tool.oschina.net/regex</a>)</p><h3 id="3-2边界符"><a href="#3-2边界符" class="headerlink" title="3.2边界符"></a>3.2边界符</h3><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本（以谁开始）</td></tr><tr><td>$</td><td>表示匹配行尾的文本（以谁结束）</td></tr></tbody></table><p>如果 ^和 $ 在一起，表示必须是精确匹配。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> rg <span class="token operator">=</span> <span class="token regex">/abc/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正则表达式里面不需要加引号 不管是数字型还是字符串型</span><span class="token comment" spellcheck="true">// /abc/ 只要包含有abc这个字符串返回的都是true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aabcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---------------------------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^abc/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aabcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---------------------------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token regex">/^abc$/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 精确匹配 要求必须是 abc字符串才符合规范</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aabcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abcabc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3字符类"><a href="#3-3字符类" class="headerlink" title="3.3字符类"></a>3.3字符类</h3><p>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内。</p><h4 id="3-3-1-方括号"><a href="#3-3-1-方括号" class="headerlink" title="3.3.1 [] 方括号"></a>3.3.1 [] 方括号</h4><p>表示有一系列字符可供选择，只要匹配其中一个就可以了</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> rg <span class="token operator">=</span> <span class="token regex">/[abc]/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只要包含有a 或者 包含有b 或者包含有c 都返回为true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'andy'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'baby'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token keyword">var</span> rg1 <span class="token operator">=</span> <span class="token regex">/^[abc]$/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 三选一 只有是a 或者是 b  或者是c 这三个字母才返回 true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span>$<span class="token operator">/</span> <span class="token comment" spellcheck="true">//26个英文字母任何一个字母返回 true  - 表示的是a 到z 的范围  </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token comment" spellcheck="true">//字符组合</span><span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token regex">/^[a-zA-Z0-9]$/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 26个英文字母(大写和小写都可以)任何一个字母返回 true  </span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment" spellcheck="true">//取反 方括号内部加上 ^ 表示取反，只要包含方括号内的字符，都返回 false 。</span><span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token regex">/^[^a-zA-Z0-9]$/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-2量词符"><a href="#3-3-2量词符" class="headerlink" title="3.3.2量词符"></a>3.3.2量词符</h4><p>量词符用来设定某个模式出现的次数。</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复0次或更多次</td></tr><tr><td>+</td><td>重复1次或更多次</td></tr><tr><td>?</td><td>重复0次或1次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> reg1<span class="token operator">=</span><span class="token regex">/^a*$/</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span> <span class="token keyword">var</span> reg2<span class="token operator">=</span><span class="token regex">/^a+$/</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-3用户名表单验证"><a href="#3-3-3用户名表单验证" class="headerlink" title="3.3.3用户名表单验证"></a>3.3.3用户名表单验证</h4><p>功能需求:</p><ol><li>如果用户名输入合法, 则后面提示信息为:  用户名合法,并且颜色为绿色</li><li>如果用户名输入不合法, 则后面提示信息为:  用户名不符合规范, 并且颜色为红色</li></ol><p><img src="https://s2.loli.net/2022/06/14/7QsUXGxFvkeA6J8.png"></p><p><img src="https://s2.loli.net/2022/06/14/8Zriz71ok9Dvdjm.png"></p><p>分析:</p><ol><li>用户名只能为英文字母,数字,下划线或者短横线组成, 并且用户名长度为6~16位.</li><li>首先准备好这种正则表达式模式&#x2F;$[a-zA-Z0-9-_]{6,16}^&#x2F;</li><li>当表单失去焦点就开始验证. </li><li>如果符合正则规范, 则让后面的span标签添加 right类.</li><li>如果不符合正则规范, 则让后面的span标签添加 wrong类.</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"uname"</span><span class="token operator">></span> <span class="token operator">&lt;</span>span<span class="token operator">></span>请输入用户名<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token comment" spellcheck="true">//  量词是设定某个模式出现的次数</span> <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^[a-zA-Z0-9_-]{6,16}$/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个模式用户只能输入英文字母 数字 下划线 中划线</span> <span class="token keyword">var</span> uname <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.uname'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> uname<span class="token punctuation">.</span>onblur <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'正确的'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   span<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'right'</span><span class="token punctuation">;</span>   span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'用户名格式输入正确'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'错误的'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   span<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'wrong'</span><span class="token punctuation">;</span>   span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'用户名格式输入不正确'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-4-括号总结"><a href="#3-3-4-括号总结" class="headerlink" title="3.3.4 括号总结"></a>3.3.4 括号总结</h4><p>1.大括号  量词符.  里面表示重复次数</p><p>2.中括号 字符集合。匹配方括号中的任意字符. </p><p>3.小括号表示优先级</p><p><a href="https://c.runoob.com/">正则表达式在线测试</a></p><h3 id="3-4预定义类"><a href="#3-4预定义类" class="headerlink" title="3.4预定义类"></a>3.4预定义类</h3><p>预定义类指的是某些常见模式的简写方式.</p><p><img src="https://s2.loli.net/2022/06/14/AtqP3zYQRMr4Hdg.png"></p><p><strong>案例:验证座机号码</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^\d{3}-\d{8}|\d{4}-\d{7}$/</span><span class="token punctuation">;</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^\d{3,4}-\d{7,8}$/</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>表单验证案例</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//手机号验证:/^1[3|4|5|7|8][0-9]{9}$/;</span><span class="token comment" spellcheck="true">//验证通过与不通过更换元素的类名与元素中的内容</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log('正确的');</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'success'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;i class="success_icon">&lt;/i> 恭喜您输入正确'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// console.log('不正确');</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'error'</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;i class="error_icon">&lt;/i>格式不正确,请从新输入 '</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//QQ号验证: /^[1-9]\d{4,}$/; </span><span class="token comment" spellcheck="true">//昵称验证:/^[\u4e00-\u9fa5]{2,8}$/</span><span class="token comment" spellcheck="true">//验证通过与不通过更换元素的类名与元素中的内容 ,将上一步的匹配代码进行封装,多次调用即可</span> <span class="token keyword">function</span> <span class="token function">regexp</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> reg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ele<span class="token punctuation">.</span>onblur <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log('正确的');</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'success'</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;i class="success_icon">&lt;/i> 恭喜您输入正确'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// console.log('不正确');</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'error'</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;i class="error_icon">&lt;/i> 格式不正确,请从新输入 '</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//密码验证:/^[a-zA-Z0-9_-]{6,16}$/</span><span class="token comment" spellcheck="true">//再次输入密码只需匹配与上次输入的密码值 是否一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-5正则替换replace"><a href="#3-5正则替换replace" class="headerlink" title="3.5正则替换replace"></a>3.5正则替换replace</h3><p>replace() 方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'andy和red'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'andy'</span><span class="token punctuation">,</span> <span class="token string">'baby'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//baby和red</span><span class="token comment" spellcheck="true">//等同于 此处的andy可以写在正则表达式内</span><span class="token keyword">var</span> newStr2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/andy/</span><span class="token punctuation">,</span> <span class="token string">'baby'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//baby和red</span><span class="token comment" spellcheck="true">//全部替换</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcabc'</span><span class="token keyword">var</span> nStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/a/</span><span class="token punctuation">,</span><span class="token string">'哈哈'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nStr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//哈哈bcabc</span><span class="token comment" spellcheck="true">//全部替换g</span><span class="token keyword">var</span> nStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span>a<span class="token operator">/</span>a<span class="token punctuation">,</span><span class="token string">'哈哈'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nStr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//哈哈bc哈哈bc</span><span class="token comment" spellcheck="true">//忽略大小写i</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'aAbcAba'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/a/gi</span><span class="token punctuation">,</span><span class="token string">'哈哈'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//"哈哈哈哈bc哈哈b哈哈"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例:过滤敏感词汇</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>textarea name<span class="token operator">=</span><span class="token string">""</span> id<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span> <span class="token operator">&lt;</span>button<span class="token operator">></span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'textarea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/激情|gay/g</span><span class="token punctuation">,</span> <span class="token string">'**'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-6正则的转义字符"><a href="#3-6正则的转义字符" class="headerlink" title="3.6正则的转义字符"></a>3.6正则的转义字符</h3><p><strong>一、转义符（\）介绍</strong></p><p>代表除了换行符以外的任意字符，转义后，它代表之后就是一个点。</p><p>转义是指：使这个“.”失去功能。如果不是写字符串1，而是写一个点，那么即为true。</p><p><strong>二、类型总结</strong></p><p><strong>1、|符号：|表或者</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> reg1<span class="token operator">=</span><span class="token regex">/javascript|php|java/g</span> <span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2、点符号：、.啊+号a是特殊字符，原意匹配要加\转义</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> reg2<span class="token operator">=</span><span class="token regex">/img\.jpg/g</span> <span class="token comment" spellcheck="true">//转义字符 \n //</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、转义字符：特殊字符，都要加转义\</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> $ # <span class="token operator">&amp;</span> <span class="token operator">*</span> <span class="token punctuation">.</span> <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">//j</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>三、使用实例：在查找特殊符号的时候需要用到转义字符</strong>\</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"img1.jpg img2#jpg img+jpg"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/\.jpg/g</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用\对.进行了转义之后</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-js"><code class="language-js">【<span class="token string">".jpg"</span>】j<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上就是js正则表达式转义字符的介绍，希望能帮助你理解。</p><h3 id="3-7JavaScript-exec-方法"><a href="#3-7JavaScript-exec-方法" class="headerlink" title="3.7JavaScript exec() 方法"></a>3.7JavaScript exec() 方法</h3><p><a href="https://www.runoob.com/jsref/jsref-obj-regexp.html"><img src="https://s2.loli.net/2022/06/15/HmR6y2CLBeYlMiF.gif" alt="RegExp 对象参考手册"> JavaScript RegExp 对象</a></p><h4 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>exec() 方法用于检索字符串中的正则表达式的匹配。</p><p>如果字符串中有匹配的值返回该匹配值，否则返回 null。</p><p><strong>返回值是一个数组</strong></p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>RegExpObject.exec(<em>string</em>)</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查找"Hello"</span><span class="token keyword">var</span> patt<span class="token operator">=</span><span class="token regex">/Hello/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> result<span class="token operator">=</span>patt<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"返回值: "</span> <span class="token operator">+</span>  result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查找 "RUNOOB"</span>patt<span class="token operator">=</span><span class="token regex">/RUNOOB/g</span><span class="token punctuation">;</span>result<span class="token operator">=</span>patt<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br>返回值: "</span> <span class="token operator">+</span>  result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tex"><code class="language-tex">Returned value: HelloReturned value: null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript高级用法</title>
      <link href="/2022/061262836.html"/>
      <url>/2022/061262836.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-函数的定义和调用"><a href="#1-函数的定义和调用" class="headerlink" title="1.函数的定义和调用"></a>1.函数的定义和调用</h2><h3 id="1-1函数的定义方式"><a href="#1-1函数的定义方式" class="headerlink" title="1.1函数的定义方式"></a>1.1函数的定义方式</h3><ol><li><p>方式1 函数声明方式 function 关键字 (命名函数)</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方式2 函数表达式(匿名函数)</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方式3 new Function() </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'console.log(a + b)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'参数1'</span><span class="token punctuation">,</span><span class="token string">'参数2'</span><span class="token operator">...</span><span class="token punctuation">,</span> <span class="token string">'函数体'</span><span class="token punctuation">)</span>注意<span class="token comment" spellcheck="true">/*Function 里面参数都必须是字符串格式第三种方式执行效率低，也不方便书写，因此较少使用所有函数都是 Function 的实例(对象)  函数也属于对象*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="1-2函数的调用"><a href="#1-2函数的调用" class="headerlink" title="1.2函数的调用"></a>1.2函数的调用</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* 1. 普通函数 */</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'人生的巅峰'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 2. 对象的方法 */</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>  sayHi<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'人生的巅峰'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>o<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 3. 构造函数*/</span><span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 4. 绑定事件函数*/</span> btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 点击了按钮就可以调用这个函数</span><span class="token comment" spellcheck="true">/* 5. 定时器函数*/</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  这个函数是定时器自动<span class="token number">1</span>秒钟调用一次<span class="token comment" spellcheck="true">/* 6. 立即执行函数(自调用函数)*/</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'人生的巅峰'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-this"><a href="#2-this" class="headerlink" title="2.this"></a>2.this</h2><h3 id="2-1函数内部的this指向"><a href="#2-1函数内部的this指向" class="headerlink" title="2.1函数内部的this指向"></a>2.1函数内部的this指向</h3><p>这些 this 的指向，是当我们调用函数的时候确定的。调用方式的不同决定了this 的指向不同</p><p>一般指向我们的调用者.</p><p>​<strong>function(){}()立即执行函数的this指向window</strong></p><p><img src="https://s2.loli.net/2022/06/12/fpdND3HxhQ92OP6.png"></p><h3 id="2-2改变函数内部-this-指向"><a href="#2-2改变函数内部-this-指向" class="headerlink" title="2.2改变函数内部 this 指向"></a>2.2改变函数内部 this 指向</h3><h4 id="2-2-1-call方法"><a href="#2-2-1-call方法" class="headerlink" title="2.2.1 call方法"></a>2.2.1 call方法</h4><p>call()方法调用一个对象。简单理解为调用函数的方式，但是它可以改变函数的 this 指向</p><p><strong>fun.call(thisArg, arg1, arg2, …)</strong>  </p><ul><li>thisArg：在 fun 函数运行时指定的 this 值 </li><li>arg1，arg2：传递的其他参数 </li><li>返回值就是函数的返回值，因为它就是调用函数</li><li>因此当我们想改变 this 指向，同时想调用这个函数的时候，可以使用 call，比如继承</li></ul><p>应用场景:  经常做继承. </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'andy'</span><span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 此时的this指向的是window 运行结果为3</span>fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//此时的this指向的是对象o,参数使用逗号隔开,运行结果为3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码运行结果为:</p><p><img src="https://s2.loli.net/2022/06/12/iygC5u6RFcDOj4B.png"></p><h4 id="2-2-2-apply方法"><a href="#2-2-2-apply方法" class="headerlink" title="2.2.2 apply方法"></a>2.2.2 apply方法</h4><p>apply() 方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的 this 指向。</p><p><strong>fun.apply(thisArg, [argsArray])</strong> </p><ul><li>thisArg：在fun函数运行时指定的 this 值</li><li>argsArray：传递的值，必须包含在数组里面 </li><li>返回值就是函数的返回值，因为它就是调用函数</li><li>因此 apply 主要跟数组有关系，比如使用 Math.max() 求数组的最大值</li></ul><p>应用场景:  经常跟数组有关系，如：Math.max.apply(null,数组)；</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'andy'</span><span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 此时的this指向的是window 运行结果为3</span>fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//此时的this指向的是对象o,参数使用数组传递 运行结果为3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/06/12/iygC5u6RFcDOj4B.png"></p><h4 id="2-2-3-bind方法"><a href="#2-2-3-bind方法" class="headerlink" title="2.2.3 bind方法"></a>2.2.3 bind方法</h4><p>bind() 方法不会调用函数,但是能改变函数内部this 指向,返回的是原函数改变this之后产生的新函数</p><p>如果只是想改变 this 指向，并且不想调用这个函数的时候，可以使用bind</p><p><strong>fun.bind(thisArg, arg1, arg2, …)</strong> </p><ul><li>thisArg：在 fun 函数运行时指定的 this 值</li><li>arg1，arg2：传递的其他参数 </li><li>返回由指定的 this 值和初始化参数改造的原函数拷贝</li><li>因此当我们只是想改变 this 指向，并且不想调用这个函数的时候，可以使用 bind</li></ul><p>应用场景:不调用函数,但是还想改变this指向</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'andy'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> f <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处的f是bind返回的新函数</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用新函数  this指向的是对象o 参数使用逗号隔开</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/06/12/UwEHuVZXYF7RjoJ.png"></p><h4 id="2-2-4-call、apply、bind三者的异同"><a href="#2-2-4-call、apply、bind三者的异同" class="headerlink" title="2.2.4 call、apply、bind三者的异同"></a>2.2.4 call、apply、bind三者的异同</h4><ul><li><p>共同点 : 都可以改变this指向</p></li><li><p>不同点:</p><ul><li>call 和 apply  会调用函数, 并且改变函数内部this指向.</li><li>call 和 apply传递的参数不一样,call传递参数使用逗号隔开,apply使用数组传递</li><li>bind  不会调用函数, 可以改变函数内部this指向.</li></ul></li><li><p>应用场景</p><ol><li>call 经常做继承. </li><li>apply经常跟数组有关系.  比如借助于数学对象实现数组最大值最小值</li><li>bind  不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向.</li></ol></li></ul><h2 id="3-严格模式"><a href="#3-严格模式" class="headerlink" title="3.严格模式"></a>3.严格模式</h2><h3 id="3-1什么是严格模式"><a href="#3-1什么是严格模式" class="headerlink" title="3.1什么是严格模式"></a>3.1什么是严格模式</h3><p>JavaScript 除了提供正常模式外，还提供了严格模式（strict mode）。ES5 的严格模式是采用具有限制性 JavaScript变体的一种方式，即在严格的条件下运行 JS 代码。</p><p>严格模式在 IE10 以上版本的浏览器中才会被支持，旧版本浏览器中会被忽略。</p><p>严格模式对正常的 JavaScript 语义做了一些更改： </p><p>1.消除了 Javascript 语法的一些不合理、不严谨之处，减少了一些怪异行为。</p><p>2.消除代码运行的一些不安全之处，保证代码运行的安全。</p><p>3.提高编译器效率，增加运行速度。</p><p>4.禁用了在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 Javascript 做好铺垫。比如一些保留字如：class,enum,export, extends, import, super 不能做变量名</p><h3 id="3-2开启严格模式"><a href="#3-2开启严格模式" class="headerlink" title="3.2开启严格模式"></a>3.2开启严格模式</h3><p>严格模式可以应用到整个脚本或个别函数中。因此在使用时，我们可以将严格模式分为为脚本开启严格模式和为函数开启严格模式两种情况。</p><ul><li><p>情况一 :为脚本开启严格模式</p><ul><li><p>有的 script 脚本是严格模式，有的 script 脚本是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在一个立即执行的匿名函数之中。这样独立创建一个作用域而不影响其他<br>script 脚本文件。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//在当前的这个自调用函数中有开启严格模式，当前函数之外还是普通模式</span>　　　　<span class="token string">"use strict"</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>　　　　<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或者 </span><span class="token operator">&lt;</span>script<span class="token operator">></span>  　<span class="token string">"use strict"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前script标签开启了严格模式</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>              <span class="token comment" spellcheck="true">//当前script标签未开启严格模式</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>情况二: 为函数开启严格模式</p><ul><li><p>要给某个函数开启严格模式，需要把“use strict”;  (或 ‘use strict’; ) 声明放在函数体所有语句之前。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　<span class="token string">"use strict"</span><span class="token punctuation">;</span>　　<span class="token keyword">return</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//当前fn函数开启了严格模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="3-3严格模式中的变化"><a href="#3-3严格模式中的变化" class="headerlink" title="3.3严格模式中的变化"></a>3.3严格模式中的变化</h3><p>严格模式对 Javascript 的语法和行为，都做了一些改变。</p><p>① 以前在全局作用域函数中的 this 指向 window 对象。</p><p> ② 严格模式下全局作用域中函数中的 this 是 undefined。</p><p> ③ 以前构造函数时不加 new也可以 调用,当普通函数，this 指向全局对象 </p><p>④ 严格模式下,如果 构造函数不加new调用, this 指向的是undefined 如果给他赋值则 会报错</p><p> ⑤ new 实例化的构造函数指向创建的对象实例。</p><p> ⑥ 定时器 this 还是指向 window 。</p><p> ⑦ 事件、对象还是指向调用者。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'use strict'</span>num <span class="token operator">=</span> <span class="token number">10</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//严格模式后使用未声明的变量</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">delete</span> num2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//严格模式不允许删除变量</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 严格模式下全局作用域中函数中的 this 是 undefined</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Star();严格模式下,如果 构造函数不加new调用, this 指向的是undefined 如果给他赋值则 会报错.</span><span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//严格模式下，定时器 this 还是指向 window</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">更多严格模式要求参考</a></p><h3 id="3-4严格模式中函数的变化"><a href="#3-4严格模式中函数的变化" class="headerlink" title="3.4严格模式中函数的变化"></a>3.4严格模式中函数的变化</h3><p>① 函数不能有重名的参数。 </p><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 6. 严格模式下函数里面的参数不允许有重名</span>         <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>② 函数必须声明在顶层.新版本的 JavaScript 会引入“块级作用域”（ ES6 中已引入）。为了与新版本接轨， 不允许在非函数的代码块内声明函数。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// !!! 语法错误</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// !!! 语法错误</span>  <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 合法</span>  <span class="token keyword">function</span> <span class="token function">eit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 同样合法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-高阶函数"><a href="#4-高阶函数" class="headerlink" title="4.高阶函数"></a>4.高阶函数</h2><p>高阶函数是对其他函数进行操作的函数，它接收函数作为参数或将函数作为返回值输出。</p><p><img src="https://s2.loli.net/2022/06/12/pfeuLArqD5nP7mx.png"></p><pre class="line-numbers language-js"><code class="language-js">   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            left<span class="token punctuation">:</span> <span class="token number">500</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"backgroundColor"</span><span class="token punctuation">,</span> <span class="token string">"purple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时fn 就是一个高阶函数</p><p>函数也是一种数据类型，同样可以作为参数，传递给另外一个参数使用。最典型的就是作为回调函数。</p><p>同理函数也可以作为返回值传递回来</p><h2 id="5-闭包"><a href="#5-闭包" class="headerlink" title="5.闭包"></a>5.闭包</h2><h3 id="5-1变量的作用域复习"><a href="#5-1变量的作用域复习" class="headerlink" title="5.1变量的作用域复习"></a>5.1变量的作用域复习</h3><p>变量根据作用域的不同分为两种：全局变量和局部变量。</p><ol><li>函数内部可以使用全局变量。</li><li>函数外部不可以使用局部变量。</li><li>当函数执行完毕，本作用域内的局部变量会销毁。</li></ol><h3 id="5-2什么是闭包"><a href="#5-2什么是闭包" class="headerlink" title="5.2什么是闭包"></a>5.2什么是闭包</h3><p>闭包（closure）指有权访问另一个函数作用域中变量的函数。简单理解就是 ，一个作用域可以访问另外一个函数内部的局部变量。 </p><hr><p>python闭包的作用：可以保存外部函数的变量<br>python闭包的形成条件:</p><ol><li>函数镶套</li><li>内部函数使用了外部函数的变量或者参数</li><li>外部函数返回内部函数，这个使用了外部函数变量的内部函数称为闭包</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun_out</span><span class="token punctuation">(</span>num6<span class="token punctuation">)</span><span class="token punctuation">:</span>    num<span class="token operator">=</span><span class="token number">10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num6<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fun_inner</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">:</span>        res<span class="token operator">=</span>num<span class="token operator">+</span>num2        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">return</span> fun_inner<span class="token comment" spellcheck="true"># 获取闭包对象</span>ner<span class="token operator">=</span>fun_out<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>ner<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> js 闭包（closure）指有权访问另一个函数作用域中变量的函数。<br> js 闭包: 我们fn2 这个函数作用域 访问了另外一个函数 fn1 里面的局部变量 num</p><p><img src="https://s2.loli.net/2022/06/12/3aYB7fZU19It4Wy.png"></p><h3 id="5-3闭包的作用"><a href="#5-3闭包的作用" class="headerlink" title="5.3闭包的作用"></a>5.3闭包的作用</h3><p><strong>作用：延伸变量的作用范围。</strong></p><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> fun<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4闭包的案例"><a href="#5-4闭包的案例" class="headerlink" title="5.4闭包的案例"></a>5.4闭包的案例</h3><ol><li>利用闭包的方式得到当前li 的索引号</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 利用for循环创建了4个立即执行函数</span><span class="token comment" spellcheck="true">// 立即执行函数也成为小闭包因为立即执行函数里面的任何一个函数都可以使用它的i这变量</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>闭包应用-3秒钟之后,打印所有li元素的内容</li></ol><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>闭包应用-计算打车价格</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*需求分析打车起步价13(3公里内),  之后每多一公里增加 5块钱.  用户输入公里数就可以计算打车价格如果有拥堵情况,总价格多收取10块钱拥堵费*/</span> <span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">var</span> start <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 起步价  局部变量</span>     <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 总价  局部变量</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 正常的总价</span>       price<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           total <span class="token operator">=</span> start<span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>           total <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> total<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// 拥堵之后的费用</span>       yd<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> flag <span class="token operator">?</span> total <span class="token operator">+</span> <span class="token number">10</span> <span class="token punctuation">:</span> total<span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 23</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">yd</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 33</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5案例"><a href="#5-5案例" class="headerlink" title="5.5案例"></a>5.5案例</h3><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"The Window"</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>     name<span class="token punctuation">:</span> <span class="token string">"My Object"</span><span class="token punctuation">,</span>     getNameFunc<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"The Window"</span><span class="token punctuation">;</span>　　  <span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>　　　　    name<span class="token punctuation">:</span> <span class="token string">"My Object"</span><span class="token punctuation">,</span>    getNameFunc<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> that<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-递归"><a href="#6-递归" class="headerlink" title="6.递归"></a>6.递归</h2><h3 id="6-1什么是递归"><a href="#6-1什么是递归" class="headerlink" title="6.1什么是递归"></a>6.1什么是递归</h3><p><strong>递归：</strong>如果一个函数在内部可以调用其本身，那么这个函数就是递归函数。简单理解:函数内部自己调用自己, 这个函数就是递归函数</p><p><strong>注意：</strong>递归函数的作用和循环效果一样，由于递归很容易发生“栈溢出”错误（stack overflow），所以必须要加退出条件return。</p><h3 id="6-2利用递归求1-n的阶乘"><a href="#6-2利用递归求1-n的阶乘" class="headerlink" title="6.2利用递归求1~n的阶乘"></a>6.2利用递归求1~n的阶乘</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//利用递归函数求1~n的阶乘 1 * 2 * 3 * 4 * ..n</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//结束条件</span>       <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">fn</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/06/12/VDh8RS9nCWjiHeA.png"></p><h3 id="6-3利用递归求斐波那契数列"><a href="#6-3利用递归求斐波那契数列" class="headerlink" title="6.3利用递归求斐波那契数列"></a>6.3利用递归求斐波那契数列</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 利用递归函数求斐波那契数列(兔子序列)  1、1、2、3、5、8、13、21...</span><span class="token comment" spellcheck="true">// 用户输入一个数字 n 就可以求出 这个数字对应的兔子序列值</span><span class="token comment" spellcheck="true">// 我们只需要知道用户输入的n 的前面两项(n-1 n-2)就可以计算出n 对应的序列值</span><span class="token keyword">function</span> <span class="token function">fb</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">fb</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fb</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fb</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4利用递归遍历数据"><a href="#6-4利用递归遍历数据" class="headerlink" title="6.4利用递归遍历数据"></a>6.4利用递归遍历数据</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 我们想要做输入id号,就可以返回的数据对象</span> <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>   id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>   name<span class="token punctuation">:</span> <span class="token string">'家电'</span><span class="token punctuation">,</span>   goods<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>     id<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>     gname<span class="token punctuation">:</span> <span class="token string">'冰箱'</span><span class="token punctuation">,</span>     goods<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>       id<span class="token punctuation">:</span> <span class="token number">111</span><span class="token punctuation">,</span>       gname<span class="token punctuation">:</span> <span class="token string">'海尔'</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>       id<span class="token punctuation">:</span> <span class="token number">112</span><span class="token punctuation">,</span>       gname<span class="token punctuation">:</span> <span class="token string">'美的'</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>     id<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>     gname<span class="token punctuation">:</span> <span class="token string">'洗衣机'</span>   <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>   id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>   name<span class="token punctuation">:</span> <span class="token string">'服饰'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.利用 forEach 去遍历里面的每一个对象</span> <span class="token keyword">function</span> <span class="token function">getID</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   json<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// console.log(item); // 2个数组元素</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>id <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// console.log(item);</span>       o <span class="token operator">=</span> item<span class="token punctuation">;</span>       <span class="token keyword">return</span> o<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 2. 我们想要得里层的数据 11 12 可以利用递归函数</span>       <span class="token comment" spellcheck="true">// 里面应该有goods这个数组并且数组的长度不为 0 </span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>goods <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>goods<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       o <span class="token operator">=</span> <span class="token function">getID</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>goods<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-拷贝"><a href="#7-拷贝" class="headerlink" title="7.拷贝"></a>7.拷贝</h2><h3 id="7-1-浅拷贝"><a href="#7-1-浅拷贝" class="headerlink" title="7.1 浅拷贝"></a>7.1 浅拷贝</h3><p>概念：浅拷贝只是拷贝一层, 更深层次对象级别的只拷贝引用.</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'andy'</span><span class="token punctuation">,</span>            msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>                age<span class="token punctuation">:</span> <span class="token number">18</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// for (var k in obj) {</span>        <span class="token comment" spellcheck="true">//     // k 是属性名   obj[k] 属性值</span>        <span class="token comment" spellcheck="true">//     o[k] = obj[k];</span>        <span class="token comment" spellcheck="true">// }</span>        <span class="token comment" spellcheck="true">// console.log(o);</span>        <span class="token comment" spellcheck="true">// o.msg.age = 20;</span>        <span class="token comment" spellcheck="true">// console.log(obj);</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'--------------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-深拷贝"><a href="#7-2-深拷贝" class="headerlink" title="7.2 深拷贝"></a>7.2 深拷贝</h3><p>概念： 深拷贝拷贝多层, 每一级别的数据都会拷贝.</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'andy'</span><span class="token punctuation">,</span>            msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>                age<span class="token punctuation">:</span> <span class="token number">18</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            color<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'pink'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 封装函数 </span>        <span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>newobj<span class="token punctuation">,</span> oldobj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> oldobj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 判断我们的属性值属于那种数据类型</span>                <span class="token comment" spellcheck="true">// 1. 获取属性值  oldobj[k]</span>                <span class="token keyword">var</span> item <span class="token operator">=</span> oldobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 2. 判断这个值是否是数组</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token function">deepCopy</span><span class="token punctuation">(</span>newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 3. 判断这个值是否是对象</span>                    newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                    <span class="token function">deepCopy</span><span class="token punctuation">(</span>newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 4. 属于简单数据类型</span>                    newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">deepCopy</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript的对象与数组总结</title>
      <link href="/2022/061251457.html"/>
      <url>/2022/061251457.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-构造函数和原型"><a href="#1-构造函数和原型" class="headerlink" title="1.构造函数和原型"></a>1.构造函数和原型</h2><h3 id="1-1对象的三种创建方式–复习"><a href="#1-1对象的三种创建方式–复习" class="headerlink" title="1.1对象的三种创建方式–复习"></a>1.1对象的三种创建方式–复习</h3><ol><li><p>字面量方式</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>new关键字</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>构造函数方式</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'zs'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="1-2静态成员和实例成员"><a href="#1-2静态成员和实例成员" class="headerlink" title="1.2静态成员和实例成员"></a>1.2静态成员和实例成员</h3><h4 id="1-2-1实例成员"><a href="#1-2-1实例成员" class="headerlink" title="1.2.1实例成员"></a>1.2.1实例成员</h4><p>实例成员就是构造函数内部通过this添加的成员 如下列代码中uname age sing 就是实例成员,实例成员只能通过实例化的对象来访问</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>sing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">.</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例成员只能通过实例化的对象来访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2静态成员"><a href="#1-2-2静态成员" class="headerlink" title="1.2.2静态成员"></a>1.2.2静态成员</h4><p>静态成员 在构造函数本身上添加的成员  如下列代码中 sex 就是静态成员,静态成员只能通过构造函数来访问</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>sing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Star<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span><span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Star<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态成员只能通过构造函数来访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3构造函数的问题"><a href="#1-3构造函数的问题" class="headerlink" title="1.3构造函数的问题"></a>1.3构造函数的问题</h3><p>构造函数方法很好用，但是存在浪费内存的问题。</p><p><img src="https://s2.loli.net/2022/06/14/wZGPpj81h9DfUyO.png"></p><h3 id="1-4构造函数原型prototype"><a href="#1-4构造函数原型prototype" class="headerlink" title="1.4构造函数原型prototype"></a>1.4构造函数原型prototype</h3><p>构造函数通过原型分配的函数是所有对象所共享的。</p><p>JavaScript 规定，每一个构造函数都有一个prototype 属性，指向另一个对象。注意这个prototype就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有。</p><p>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Star<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> zxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'张学友'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ldh<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//我会唱歌</span>zxy<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//我会唱歌</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/06/14/n2c3muxA1JEW5tI.png"></p><h3 id="1-5对象原型"><a href="#1-5对象原型" class="headerlink" title="1.5对象原型"></a>1.5对象原型</h3><pre class="line-numbers language-html"><code class="language-html">对象都会有一个属性 __proto__ 指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 __proto__ 原型的存在。__proto__对象原型和原型对象 prototype 是等价的__proto__对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此实际开发中，不可以使用这个属性，它只是内部指向原型对象 prototype<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/06/14/hSwQurAD6iJzcmq.png"></p><h3 id="1-6constructor构造函数"><a href="#1-6constructor构造函数" class="headerlink" title="1.6constructor构造函数"></a>1.6constructor构造函数</h3><pre class="line-numbers language-html"><code class="language-html">对象原型（ __proto__）和构造函数（prototype）原型对象里面都有一个属性 constructor 属性 ，constructor 我们称为构造函数，因为它指回构造函数本身。constructor 主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数。一般情况下，对象的方法都在构造函数的原型对象中设置。如果有多个对象的方法，我们可以给原型对象采取对象形式赋值，但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor  就不再指向当前构造函数了。此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数如:</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 很多情况下,我们需要手动的利用constructor 这个属性指回 原来的构造函数</span> Star<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数</span>   constructor<span class="token punctuation">:</span> Star<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 手动设置指回原来的构造函数</span>   sing<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   movie<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会演电影'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> zxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'张学友'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zxy<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码运行结果,设置constructor属性如图:</p><p><img src="https://s2.loli.net/2022/06/14/1OPFg8mz3RJqH7L.png"></p><h3 id="1-7原型链"><a href="#1-7原型链" class="headerlink" title="1.7原型链"></a>1.7原型链</h3><p>​每一个实例对象又有一个__proto__属性，指向的构造函数的原型对象，构造函数的原型对象也是一个对象，也有__proto__属性，这样一层一层往上找就形成了原型链。</p><p><img src="https://s2.loli.net/2022/06/14/MEfzL6xSu3GsoPZ.png"></p><h3 id="1-8构造函数实例和原型对象三角关系"><a href="#1-8构造函数实例和原型对象三角关系" class="headerlink" title="1.8构造函数实例和原型对象三角关系"></a>1.8构造函数实例和原型对象三角关系</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>构造函数的prototype属性指向了构造函数原型对象<span class="token number">2</span><span class="token punctuation">.</span>实例对象是由构造函数创建的<span class="token punctuation">,</span>实例对象的__proto__属性指向了构造函数的原型对象<span class="token number">3</span><span class="token punctuation">.</span>构造函数的原型对象的constructor属性指向了构造函数<span class="token punctuation">,</span>实例对象的原型的constructor属性也指向了构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="https://s2.loli.net/2022/06/14/dvk9KFUwxCZnNug.png" alt="image-20220614123550010" style="zoom:80%;" /><h3 id="1-9原型链和成员的查找机制"><a href="#1-9原型链和成员的查找机制" class="headerlink" title="1.9原型链和成员的查找机制"></a>1.9原型链和成员的查找机制</h3><p>任何对象都有原型对象,也就是prototype属性,任何原型对象也是一个对象,该对象就有__proto__属性,这样一层一层往上找,就形成了一条链,我们称此为原型链;</p><pre class="line-numbers language-html"><code class="language-html">当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）。如果还没有就查找原型对象的原型（Object的原型对象）。依此类推一直找到 Object 为止（null）。__proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-10原型对象中this指向"><a href="#1-10原型对象中this指向" class="headerlink" title="1.10原型对象中this指向"></a>1.10原型对象中this指向</h3><p>构造函数中的this和原型对象的this,都指向我们new出来的实例对象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> that<span class="token punctuation">;</span>Star<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1. 在构造函数中,里面this指向的是对象实例 ldh</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that <span class="token operator">===</span> ldh<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">// 2.原型对象函数里面的this 指向的是 实例对象 ldh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/06/14/Z8eWjPqLlcwFS2I.png"></p><h3 id="1-11通过原型为数组扩展内置方法"><a href="#1-11通过原型为数组扩展内置方法" class="headerlink" title="1.11通过原型为数组扩展内置方法"></a>1.11通过原型为数组扩展内置方法</h3><pre class="line-numbers language-js"><code class="language-js"> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> sum<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此时数组对象中已经存在sum()方法了  可以始终 数组.sum()进行数据的求</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-继承"><a href="#2-继承" class="headerlink" title="2.继承"></a>2.继承</h2><h3 id="2-1call"><a href="#2-1call" class="headerlink" title="2.1call()"></a>2.1call()</h3><ul><li>call()可以调用函数</li><li>call()可以修改this的指向,使用call()的时候 参数一是修改后的this指向,参数2,参数3..使用逗号隔开连接</li></ul><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'andy'</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用了函数此时的this指向了对象o,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/06/14/uzKhavLPM57NZjF.png"></p><h3 id="2-2子构造函数继承父构造函数中的属性"><a href="#2-2子构造函数继承父构造函数中的属性" class="headerlink" title="2.2子构造函数继承父构造函数中的属性"></a>2.2子构造函数继承父构造函数中的属性</h3><ol><li>先定义一个父构造函数</li><li>再定义一个子构造函数</li><li>子构造函数继承父构造函数的属性(使用call方法)</li></ol><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 1. 父构造函数</span> <span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// this 指向父构造函数的对象实例</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 2 .子构造函数 </span><span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// this 指向子构造函数的对象实例</span>  <span class="token number">3</span><span class="token punctuation">.</span>使用call方式实现子继承父的属性  Father<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/06/14/8nVM4jEKbw9gdRS.png"></p><h3 id="2-3借用原型对象继承方法"><a href="#2-3借用原型对象继承方法" class="headerlink" title="2.3借用原型对象继承方法"></a>2.3借用原型对象继承方法</h3><ol><li>先定义一个父构造函数</li><li>再定义一个子构造函数</li><li>子构造函数继承父构造函数的属性(使用call方法)</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 父构造函数</span><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// this 指向父构造函数的对象实例</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>money <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 .子构造函数 </span>  <span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// this 指向子构造函数的对象实例</span>      Father<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Son.prototype = Father.prototype;  这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span>  Son<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果利用对象的形式修改了原型对象,别忘了利用constructor 指回原来的构造函数</span>  Son<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Son<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这个是子构造函数专门的方法</span>  Son<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>exam <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'孩子要考试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码结果如图:</p><p><img src="https://s2.loli.net/2022/06/14/IjTNmoxLkWfXy7v.png"></p><h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3.数组"></a>3.数组</h2><p><strong>迭代(遍历)方法：forEach()、map()、filter()、some()、every()；</strong></p><h3 id="3-1数组方法forEach遍历数组"><a href="#3-1数组方法forEach遍历数组" class="headerlink" title="3.1数组方法forEach遍历数组"></a>3.1数组方法forEach遍历数组</h3><h4 id="array-forEach-function-currentValue-index-arr"><a href="#array-forEach-function-currentValue-index-arr" class="headerlink" title="array.forEach(function(currentValue, index, arr))"></a>array.forEach(function(currentValue, index, arr))</h4><p>​1.  currentValue：数组当前项的值   2.  index：数组当前项的索引   3. arr：数组对象本身</p><pre class="line-numbers language-js"><code class="language-js"> arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//参数一是:数组元素</span>       <span class="token comment" spellcheck="true">//参数二是:数组元素的索引</span>       <span class="token comment" spellcheck="true">//参数三是:当前的数组</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//相当于数组遍历的 for循环 没有返回值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><img src="https://s2.loli.net/2022/06/12/deCIQjfLsAPnZYF.png" alt="image-20220612163353946"  /><h3 id="3-2-数组方法filter过滤数组"><a href="#3-2-数组方法filter过滤数组" class="headerlink" title="3.2 数组方法filter过滤数组"></a>3.2 数组方法filter过滤数组</h3><h4 id="array-filter-function-currentValue-index-arr"><a href="#array-filter-function-currentValue-index-arr" class="headerlink" title="array.filter(function(currentValue, index, arr))"></a>array.filter(function(currentValue, index, arr))</h4><ul><li>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素,主要用于筛选数组 </li><li>注意它直接返回一个新数组</li><li>currentValue: 数组当前项的值 </li><li>index：数组当前项的索引</li><li>arr：数组对象本身</li></ul><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//参数一是:数组元素</span>     <span class="token comment" spellcheck="true">//参数二是:数组元素的索引</span>     <span class="token comment" spellcheck="true">//参数三是:当前的数组</span>     <span class="token keyword">return</span> value <span class="token operator">>=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[66,88] //返回值是一个新数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="https://s2.loli.net/2022/06/12/jf62EsVy74UvzOr.png" alt="image-20220612164641174"></p><h3 id="3-3-数组方法some"><a href="#3-3-数组方法some" class="headerlink" title="3.3 数组方法some"></a>3.3 数组方法some</h3><h4 id="array-some-function-currentValue-index-arr"><a href="#array-some-function-currentValue-index-arr" class="headerlink" title="array.some(function(currentValue, index, arr))"></a>array.some(function(currentValue, index, arr))</h4><ul><li>some() 方法用于检测数组中的元素是否满足指定条件. 通俗点 查找数组中是否有满足条件的元素 </li><li>注意它返回值是布尔值, 如果查找到这个元素, 就返回true , 如果查找不到就返回false.</li><li>如果找到第一个满足条件的元素,则终止循环. 不在继续查找.</li><li>currentValue: 数组当前项的值 </li><li>index：数组当前项的索引 </li><li>arr：数组对象本身</li></ul><pre class="line-numbers language-js"><code class="language-js">some 查找数组中是否有满足条件的元素  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span> flag <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//参数一是:数组元素</span>     <span class="token comment" spellcheck="true">//参数二是:数组元素的索引</span>     <span class="token comment" spellcheck="true">//参数三是:当前的数组</span>     <span class="token keyword">return</span> value <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false返回值是布尔值,只要查找到满足条件的一个元素就立马终止循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="https://s2.loli.net/2022/06/12/7XTn2vzPt3EkOHu.png" alt="image-20220612175220581"></p><h3 id="3-4-筛选商品案例"><a href="#3-4-筛选商品案例" class="headerlink" title="3.4 筛选商品案例"></a>3.4 筛选商品案例</h3><ol><li><p>定义数组对象数据</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            pname<span class="token punctuation">:</span> <span class="token string">'小米'</span><span class="token punctuation">,</span>            price<span class="token punctuation">:</span> <span class="token number">3999</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            pname<span class="token punctuation">:</span> <span class="token string">'oppo'</span><span class="token punctuation">,</span>            price<span class="token punctuation">:</span> <span class="token number">999</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            pname<span class="token punctuation">:</span> <span class="token string">'荣耀'</span><span class="token punctuation">,</span>            price<span class="token punctuation">:</span> <span class="token number">1299</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>            pname<span class="token punctuation">:</span> <span class="token string">'华为'</span><span class="token punctuation">,</span>            price<span class="token punctuation">:</span> <span class="token number">1999</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用forEach遍历数据并渲染到页面中</p><pre class="line-numbers language-js"><code class="language-js">data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> tr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'tr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tr<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;td>'</span> <span class="token operator">+</span> value<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">'&lt;/td>&lt;td>'</span> <span class="token operator">+</span> value<span class="token punctuation">.</span>pname <span class="token operator">+</span> <span class="token string">'&lt;/td>&lt;td>'</span> <span class="token operator">+</span> value<span class="token punctuation">.</span>price <span class="token operator">+</span> <span class="token string">'&lt;/td>'</span><span class="token punctuation">;</span>  tbody<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>根据价格筛选数据</p><ol><li>获取到搜索按钮并为其绑定点击事件</li></ol><pre class="line-numbers language-js"><code class="language-js">   search_price<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>使用filter将用户输入的价格信息筛选出来</li></ol><pre class="line-numbers language-js"><code class="language-js">   search_price<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">var</span> newDate <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//start.value是开始区间</span>           <span class="token comment" spellcheck="true">//end.value是结束的区间</span>             <span class="token keyword">return</span> value<span class="token punctuation">.</span>price <span class="token operator">>=</span> start<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>price <span class="token operator">&lt;=</span> end<span class="token punctuation">.</span>value<span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newDate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>将筛选出来的数据重新渲染到表格中</p><ol><li>将渲染数据的逻辑封装到一个函数中</li></ol></li></ol><pre class="line-numbers language-js"><code class="language-js">      <span class="token keyword">function</span> <span class="token function">setDate</span><span class="token punctuation">(</span>mydata<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 先清空原来tbody 里面的数据</span>        tbody<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        mydata<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> tr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'tr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          tr<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;td>'</span> <span class="token operator">+</span> value<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">'&lt;/td>&lt;td>'</span> <span class="token operator">+</span> value<span class="token punctuation">.</span>pname <span class="token operator">+</span> <span class="token string">'&lt;/td>&lt;td>'</span> <span class="token operator">+</span> value<span class="token punctuation">.</span>price <span class="token operator">+</span> <span class="token string">'&lt;/td>'</span><span class="token punctuation">;</span>            tbody<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>将筛选之后的数据重新渲染</li></ol><pre class="line-numbers language-js"><code class="language-js">       search_price<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">var</span> newDate <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> value<span class="token punctuation">.</span>price <span class="token operator">>=</span> start<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>price <span class="token operator">&lt;=</span> end<span class="token punctuation">.</span>value<span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newDate<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 把筛选完之后的对象渲染到页面中</span>           <span class="token function">setDate</span><span class="token punctuation">(</span>newDate<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>根据商品名称筛选</p><ol><li><p>获取用户输入的商品名称</p></li><li><p>为查询按钮绑定点击事件,将输入的商品名称与这个数据进行筛选</p></li></ol></li></ol><pre class="line-numbers language-js"><code class="language-js">      search_pro<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          data<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>pname <span class="token operator">===</span> product<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// console.log(value);</span>              arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return 后面必须写true  </span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 把拿到的数据渲染到页面中</span>          <span class="token function">setDate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="3-5-some和forEach区别"><a href="#3-5-some和forEach区别" class="headerlink" title="3.5 some和forEach区别"></a>3.5 some和forEach区别</h3><ul><li>如果查询数组中唯一的元素, 用some方法更合适,在some 里面 遇到 return true 就是终止遍历 迭代效率更高</li><li>在forEach 里面 return 不会终止迭代</li></ul><h3 id="3-6-trim方法去除字符串两端的空格"><a href="#3-6-trim方法去除字符串两端的空格" class="headerlink" title="3.6 trim方法去除字符串两端的空格"></a>3.6 trim方法去除字符串两端的空格</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'   hello   '</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>）  <span class="token comment" spellcheck="true">//hello 去除两端空格</span><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">'   he l l o   '</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>）  <span class="token comment" spellcheck="true">//he l l o  去除两端空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-7-获取对象的属性名"><a href="#3-7-获取对象的属性名" class="headerlink" title="3.7 获取对象的属性名"></a>3.7 获取对象的属性名</h3><h4 id="Object-keys-对象-获取到当前对象中的属性名-，返回值是一个数组"><a href="#Object-keys-对象-获取到当前对象中的属性名-，返回值是一个数组" class="headerlink" title="Object.keys(对象) 获取到当前对象中的属性名 ，返回值是一个数组"></a>Object.keys(对象) 获取到当前对象中的属性名 ，返回值是一个数组</h4><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>     id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>     pname<span class="token punctuation">:</span> <span class="token string">'小米'</span><span class="token punctuation">,</span>     price<span class="token punctuation">:</span> <span class="token number">1999</span><span class="token punctuation">,</span>     num<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[id，pname,price,num]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-8-Object-defineProperty"><a href="#3-8-Object-defineProperty" class="headerlink" title="3.8 Object.defineProperty"></a>3.8 Object.defineProperty</h3><h4 id="Object-defineProperty设置或修改对象中的属性"><a href="#Object-defineProperty设置或修改对象中的属性" class="headerlink" title="Object.defineProperty设置或修改对象中的属性"></a>Object.defineProperty设置或修改对象中的属性</h4><pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>对象，修改或新增的属性名，<span class="token punctuation">{</span>        value<span class="token punctuation">:</span>修改或新增的属性的值<span class="token punctuation">,</span>        writable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//如果值为false 不允许修改这个属性值</span>        enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//enumerable 如果值为false 则不允许遍历</span>        configurable<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token comment" spellcheck="true">//configurable 如果为false 则不允许删除这个属性 属性是否可以被删除或是否可以再次修改特性</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript的事件使用</title>
      <link href="/2022/061160379.html"/>
      <url>/2022/061160379.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-注册事件（绑定事件）"><a href="#1-注册事件（绑定事件）" class="headerlink" title="1. 注册事件（绑定事件）"></a>1. 注册事件（绑定事件）</h4><h5 id="1-addEventListener-事件监听方式"><a href="#1-addEventListener-事件监听方式" class="headerlink" title="1.addEventListener 事件监听方式"></a>1.addEventListener 事件监听方式</h5><p>eventTarget.addEventListener(type, listener[, useCapture])  </p><p>eventTarget.addEventListener()方法将指定的监听器注册到 eventTarget（目标对象）上，当该对象触发指定的事件时，就会执行事件处理函数。</p><p>该方法接收三个参数：</p><pre class="line-numbers language-tex"><code class="language-tex">type：事件类型字符串，比如 click 、mouseover ，注意这里不要带 onlistener：事件处理函数，事件发生时，会调用该监听函数useCapture：可选参数，是一个布尔值，默认是 false。学完 DOM 事件流后，我们再进一步学习<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-attachEvent-事件监听方式"><a href="#2-attachEvent-事件监听方式" class="headerlink" title="2.attachEvent 事件监听方式"></a>2.attachEvent 事件监听方式</h5><p>eventTarget.attachEvent(eventNameWithOn, callback) </p><p>eventTarget.attachEvent()方法将指定的监听器注册到 eventTarget（目标对象） 上，当该对象触发指定的事件时，指定的回调函数就会被执行。</p><p>该方法接收两个参数</p><pre class="line-numbers language-tex"><code class="language-tex">eventNameWithOn：事件类型字符串，比如 onclick 、onmouseover ，这里要带 oncallback： 事件处理函数，当目标触发事件时回调函数被调用注意：IE8 及早期版本支持<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="3-注册事件兼容性解决方案"><a href="#3-注册事件兼容性解决方案" class="headerlink" title="3.注册事件兼容性解决方案"></a>3.注册事件兼容性解决方案</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 判断当前浏览器是否支持 addEventListener 方法</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 第三个参数 默认是false</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 相当于 element.onclick = fn;</span>        element<span class="token punctuation">[</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-删除事件（解绑事件）"><a href="#2-删除事件（解绑事件）" class="headerlink" title="2.删除事件（解绑事件）"></a>2.删除事件（解绑事件）</h4><h5 id="1-删除事件的方式"><a href="#1-删除事件的方式" class="headerlink" title="1.  删除事件的方式"></a>1.  删除事件的方式</h5><h6 id="1-传统注册方式"><a href="#1-传统注册方式" class="headerlink" title="1.传统注册方式"></a>1.传统注册方式</h6><p>eventTarget.onclick &#x3D; null;</p><h6 id="2-方法监听注册方式"><a href="#2-方法监听注册方式" class="headerlink" title="2.方法监听注册方式"></a>2.方法监听注册方式</h6><ol><li>eventTarget.removeEventListener(type, listener[, useCapture]);</li><li>eventTarget.detachEvent(eventNameWithOn, callback);</li></ol><h5 id="2-删除事件兼容性解决方案"><a href="#2-删除事件兼容性解决方案" class="headerlink" title="2.删除事件兼容性解决方案"></a>2.删除事件兼容性解决方案</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">removeEventListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 判断当前浏览器是否支持 removeEventListener 方法</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 第三个参数 默认是false</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>detachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        element<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        element<span class="token punctuation">[</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-DOM-事件流"><a href="#3-DOM-事件流" class="headerlink" title="3.DOM 事件流"></a>3.DOM 事件流</h4><p>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即 DOM 事件流。<br><img src="https://s2.loli.net/2022/05/26/flOeoBR3QgHdF8j.png"></p><p>DOM 事件流分为3个阶段： </p><ol><li><p>捕获阶段</p></li><li><p>当前目标阶段</p></li><li><p>冒泡阶段</p></li></ol><p>事件冒泡： IE 最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点的过程。</p><p>事件捕获： 网景最早提出，由 DOM 最顶层节点开始，然后逐级向下传播到到最具体的元素接收的过程。 </p><p>我们向水里面扔一块石头，首先它会有一个下降的过程，这个过程就可以理解为从最顶层向事件发生的最具体元素（目标点）的捕获过程；之后会产生泡泡，会在最低点（ 最具体元素）之后漂浮到水面上，这个过程相当于事件冒泡</p><p><img src="https://s2.loli.net/2022/05/26/RPWlMtQFbC3eosN.png"></p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><pre class="line-numbers language-tex"><code class="language-tex">1.JS 代码中只能执行捕获或者冒泡其中的一个阶段。2.onclick 和 attachEvent 只能得到冒泡阶段。3.addEventListener(type, listener[, useCapture])第三个参数如果是 true，表示在事件捕获阶段调用事件处理程序；如果是 false（不写默认就是false），表示在事件冒泡阶段调用事件处理程序。4.实际开发中我们很少使用事件捕获，我们更关注事件冒泡。5.有些事件是没有冒泡的，比如 onblur、onfocus、onmouseenter、onmouseleave6.事件冒泡有时候会带来麻烦，有时候又会帮助很巧妙的做某些事件，我们后面讲解。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-事件对象"><a href="#4-事件对象" class="headerlink" title="4.事件对象"></a>4.事件对象</h4><h5 id="1-什么是事件对象"><a href="#1-什么是事件对象" class="headerlink" title="1.什么是事件对象"></a>1.什么是事件对象</h5><pre class="line-numbers language-javascript"><code class="language-javascript">eventTarget<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   eventTarget<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>）  <span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>官方解释：event 对象代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态。简单理解：事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象 event，它有很多属性和方法。</p><p>比如:1. 谁绑定了这个事件。</p><ol start="2"><li>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置。</li><li>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键。</li></ol><h5 id="2-事件对象的使用语法"><a href="#2-事件对象的使用语法" class="headerlink" title="2. 事件对象的使用语法"></a>2. 事件对象的使用语法</h5><pre class="line-numbers language-javascript"><code class="language-javascript">eventTarget<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt </span>  <span class="token punctuation">}</span>   eventTarget<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt </span>  <span class="token punctuation">}</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个 event  是个形参，系统帮我们设定为事件对象，不需要传递实参过去。当我们注册事件时， event 对象就会被系统自动创建，并依次传递给事件监听器（事件处理函数）。</p><h5 id="3-事件对象的兼容性方案"><a href="#3-事件对象的兼容性方案" class="headerlink" title="3.事件对象的兼容性方案"></a>3.事件对象的兼容性方案</h5><p>事件对象本身的获取存在兼容问题：1. 标准浏览器中是浏览器给方法传递的参数，只需要定义形参 e 就可以获取到。2. 在 IE6~8 中，浏览器不会给方法传递参数，如果需要的话，需要到 window.event 中获取查找。</p><p>解决: e &#x3D; e || window.event;</p><h5 id="4-事件对象的常见属性和方法"><a href="#4-事件对象的常见属性和方法" class="headerlink" title="4.事件对象的常见属性和方法"></a>4.事件对象的常见属性和方法</h5><p>e.target 和 this 的区别：  this 是事件绑定的元素， 这个函数的调用者（绑定这个事件的元素） </p><p>  e.target 是事件触发的元素。</p><h5 id="5-事件对象的常见属性和方法"><a href="#5-事件对象的常见属性和方法" class="headerlink" title="5.事件对象的常见属性和方法"></a>5.事件对象的常见属性和方法</h5><p><img src="https://s2.loli.net/2022/05/26/bZEp2k7zVrXuaMc.png"></p><h4 id="5-阻止事件冒泡的两种方式"><a href="#5-阻止事件冒泡的两种方式" class="headerlink" title="5.阻止事件冒泡的两种方式"></a>5.阻止事件冒泡的两种方式</h4><p>事件冒泡：开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点。</p><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。</p><h5 id="1-阻止事件冒泡"><a href="#1-阻止事件冒泡" class="headerlink" title="1.阻止事件冒泡"></a>1.阻止事件冒泡</h5><ol><li>标准写法：利用事件对象里面的 stopPropagation()方法</li></ol><p> e.stopPropagation() </p><p> 2.非标准写法：IE 6-8  利用事件对象 cancelBubble 属性 </p><p> e.cancelBubble &#x3D; true;</p><h5 id="2-阻止事件冒泡的兼容性解决方案"><a href="#2-阻止事件冒泡的兼容性解决方案" class="headerlink" title="2.阻止事件冒泡的兼容性解决方案"></a>2.阻止事件冒泡的兼容性解决方案</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span><span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-事件委托（代理、委派）"><a href="#6-事件委托（代理、委派）" class="headerlink" title="6.事件委托（代理、委派）"></a>6.事件委托（代理、委派）</h4><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。生活中有如下场景：</p><p>咱们班有100个学生， 快递员有100个快递， 如果一个个的送花费时间较长。同时每个学生领取的时候，也需要排队领取，也花费时间较长，何如</p><p>解决方案：  快递员把100个快递，委托给班主任，班主任把这些快递放到办公室，同学们下课自行领取即可。</p><p>优势：  快递员省事，委托给班主任就可以走了。 同学们领取也方便，因为相信班主任。</p><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。程序中也有如此场景：</p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，应该有弹框在手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，应该有弹框在手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，应该有弹框在手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，应该有弹框在手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，应该有弹框在手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击每个 li 都会弹出对话框，以前需要给每个 li 注册事件，是非常辛苦的，而且访问 DOM 的次数越多，这就会延长整个页面的交互就绪时间。</p><p><strong>事件委托</strong></p><p>事件委托也称为事件代理， 在 jQuery 里面称为事件委派。</p><p><strong>事件委托的原理</strong></p><p>不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点。以上案例：给 ul 注册点击事件，然后利用事件对象的 target 来找到当前点击的 li，因为点击 li，事件会冒泡到 ul 上， ul 有注册事件，就会触发事件监听器。</p><p><strong>事件委托的作用</strong></p><p>我们只操作了一次 DOM ，提高了程序的性能。</p><h4 id="7-常用的鼠标事件"><a href="#7-常用的鼠标事件" class="headerlink" title="7.常用的鼠标事件"></a>7.常用的鼠标事件</h4><p><img src="https://s2.loli.net/2022/05/26/Hk13oDrcFNO8uMX.png"></p><p>1.禁止鼠标右键菜单contextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</p><pre class="line-numbers language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'contextmenu'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2..禁止鼠标选中（selectstart 开始选中）</p><pre class="line-numbers language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'selectstart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="鼠标事件对象"></a>鼠标事件对象</h5><p>event对象代表事件的状态，跟事件相关的一系列信息的集合。现阶段我们主要是用鼠标事件对象 MouseEvent 和键盘事件对象 KeyboardEvent。</p><p><img src="https://s2.loli.net/2022/05/26/otUR5hf3wEVAFlg.png"></p><h4 id="常用键盘事件"><a href="#常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h4><p>事件除了使用鼠标触发，还可以使用键盘触发。</p><p><img src="https://s2.loli.net/2022/05/26/g6USVQJl5qsxXTK.png"></p><p>注意： 1.  如果使用addEventListener 不需要加</p><ol start="2"><li>ononkeypress 和前面2个的区别是，它不识别功能键，比如左右箭头，shift 等。</li></ol><p>3.三个事件的执行顺序是： keydown –  keypress  — keyup</p><h5 id="键盘事件对象"><a href="#键盘事件对象" class="headerlink" title="键盘事件对象"></a>键盘事件对象</h5><p><img src="https://s2.loli.net/2022/05/26/nkD3ZpKNFHfOXPB.png"></p><p>注意：  onkeydown 和 onkeyup  不区分字母大小写，onkeypress 区分字母大小写。在我们实际开发中，我们更多的使用keydown和keyup， 它能识别所有的键（包括功能键）Keypress 不识别功能键，但是keyCode属性能区分大小写，返回不同的ASCII值</p><h5 id="ASCII-表"><a href="#ASCII-表" class="headerlink" title="ASCII 表"></a>ASCII 表</h5><p><img src="https://s2.loli.net/2022/05/26/ZtkqmWRdbwAxKHY.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django第三天</title>
      <link href="/2022/061060844.html"/>
      <url>/2022/061060844.html</url>
      
        <content type="html"><![CDATA[<h2 id="Django第三天"><a href="#Django第三天" class="headerlink" title="Django第三天"></a>Django第三天</h2><h3 id="Django的站点"><a href="#Django的站点" class="headerlink" title="Django的站点"></a>Django的站点</h3><ul><li><p><strong>站点</strong>: 分为内容发布和公共访问两部分</p></li><li><p><strong>内容发布</strong>的部分由网站的管理员负责查看、添加、修改、删除数据</p></li><li><p><code>Django</code>能够根据定义的模型类自动地生成管理模块</p></li><li><p>使用</p><p>Django的管理模块, 需要按照如下步骤操作 :</p><ul><li>1.管理界面本地化</li></ul></li><li><p>2.创建管理员</p><ul><li>3.注册模型类</li></ul></li><li><p>4.发布内容到数据库</p></li></ul><h4 id="1-管理界面本地化"><a href="#1-管理界面本地化" class="headerlink" title="1 . 管理界面本地化"></a>1 . 管理界面本地化</h4><ul><li>本地化是将显示的语言、时间等使用本地的习惯，这里的本地化就是进行中国化.</li><li>中国大陆地区使用<code>简体中文</code>, 时区使用<code>亚洲/上海时区</code>, 注意这里不使用北京时区.</li><li>本地化前</li></ul><p><img src="https://s2.loli.net/2022/06/03/hgLFEWBicodCvKl.png" alt="img"></p><ul><li><p>本地化后</p><p><img src="https://s2.loli.net/2022/06/03/vyIJsl2E4Qt5xnc.png" alt="img"></p></li></ul><h4 id="2-创建管理员"><a href="#2-创建管理员" class="headerlink" title="2 . 创建管理员"></a>2 . 创建管理员</h4><ol><li><p>创建管理员的命令 :</p><pre class="line-numbers language-python"><code class="language-python">python manage<span class="token punctuation">.</span>py createsuperuser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>按提示输入用户名、邮箱、密码</p><p><img src="https://s2.loli.net/2022/06/03/BgzstbfiIo2jrEN.png" alt="img"></p></li><li><p>重置密码</p><pre class="line-numbers language-python"><code class="language-python">python manager<span class="token punctuation">.</span>py changepassword 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>登陆站点 :<code>http://127.0.0.1:8000/admin</code></p><p>需要服务器是启动状态</p><p><img src="https://s2.loli.net/2022/06/03/Gc12RUhjEd6lwFW.png" alt="img"></p></li></ol><h4 id="3-注册模型类"><a href="#3-注册模型类" class="headerlink" title="3.注册模型类"></a>3.注册模型类</h4><p>   在<code>应用</code>的<code>admin.py</code>文件中注册模型类</p><ul><li>需要导入模型模块 :<code>from book.models import BookInfo,PeopleInfo</code></li></ul><p>   <img src="https://s2.loli.net/2022/06/03/uS6QZMYiLsNTDCv.png" alt="img"></p><p>   <strong>注册模型成功后, 就可以在站点管理界面方便快速的管理数据.</strong></p><h4 id="4-发布内容到数据库"><a href="#4-发布内容到数据库" class="headerlink" title="4.发布内容到数据库"></a>4.发布内容到数据库</h4><p><img src="https://s2.loli.net/2022/06/03/kEmeILMaGDO7rtQ.gif" alt="img"></p><ul><li>发布内容后，优化模型类展示</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 准备书籍列表信息的模型类</span><span class="token keyword">class</span> <span class="token class-name">BookInfo</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建字段，字段类型...</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""将模型类以字符串的方式输出"""</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/06/03/9FjULvonzdeHpr3.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django第一天</title>
      <link href="/2022/061029103.html"/>
      <url>/2022/061029103.html</url>
      
        <content type="html"><![CDATA[<h1 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h1><h2 id="Django的使用"><a href="#Django的使用" class="headerlink" title="Django的使用"></a>Django的使用</h2><h3 id="1-MVT流程-掌握M-V-T的每个模块的功能-了解MVT的流程"><a href="#1-MVT流程-掌握M-V-T的每个模块的功能-了解MVT的流程" class="headerlink" title="1.MVT流程:掌握M,V,T的每个模块的功能,了解MVT的流程"></a>1.MVT流程:掌握M,V,T的每个模块的功能,了解MVT的流程</h3><img src="https://s2.loli.net/2022/05/30/Pr5eL4XWuD279JK.png#pic_center=" alt="image-20220530225441259" style="zoom:75%;" /><h3 id="2-创建Django项目和应用"><a href="#2-创建Django项目和应用" class="headerlink" title="2.创建Django项目和应用"></a>2.创建Django项目和应用</h3><h4 id="1-创建Django项目"><a href="#1-创建Django项目" class="headerlink" title="1.创建Django项目"></a>1.创建Django项目</h4><pre class="line-numbers language-tex"><code class="language-tex">django-admin startproject name    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.例如：想要在桌面的code目录中创建一个名为bookmanager的项目工程，可执行如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~/Desktop/Codedjango-admin startproject bookmanager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行后，会多出一个新目录名为bookmanager，此即为新创建的工程目录。</p><ol start="2"><li>工程目录说明</li></ol><p><img src="https://s2.loli.net/2022/05/30/jrf1MtiqlxepTws.png" alt="img"></p><pre class="line-numbers language-tex"><code class="language-tex">与项目同名的目录，此处为bookmanager。settings.py是项目的整体配置文件。urls.py是项目的URL配置文件。wsgi.py是项目与WSGI兼容的Web服务器入口。manage.py是项目管理文件，通过它管理项目。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>运行开发服务器</li></ol><p>​在开发阶段，为了能够快速预览到开发的效果，django提供了一个纯python编写的轻量级web服务器，仅在开发阶段使用。</p><p>​运行服务器命令如下：</p><pre class="line-numbers language-python"><code class="language-python">python manage<span class="token punctuation">.</span>py runserver ip<span class="token punctuation">:</span>端口或：python manage<span class="token punctuation">.</span>py runserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​<strong>可以不写IP和端口，默认IP是127.0.0.1，默认端口为8000</strong>。</p><p>​启动后可见如下信息：</p><p>​<img src="https://s2.loli.net/2022/05/30/sdpwLn2WCtzlVac.png" alt="img"></p><p>在浏览器中输入网址“127.0.0.1:8000”便可看到效果。</p><p><img src="https://s2.loli.net/2022/05/30/A36jc8eRpbFznMf.png" alt="img"></p><ul><li>django默认工作在调式Debug模式下，如果增加、修改、删除文件，服务器会自动重启。</li><li>按ctrl+c停止服务器。</li></ul><p>####2.创建当前Django子的应用</p><pre class="line-numbers language-tex"><code class="language-tex">python manage.py startapp name  //<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><strong>manage.py</strong>为上述创建工程时自动生成的管理文件。</li></ol><p>例如，在刚才创建的bookmanager工程中，想要创建一个用户book子应用模块，可执行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~/Desktop/code/bookpython manage.py startapp book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行后，可以看到工程目录中多出了一个名为book的子目录。</p><p>2.子应用目录说明</p><p>查看此时的工程目录，结构如下：</p><p><img src="https://s2.loli.net/2022/05/30/JX6vBKbgqaQSmej.png" alt="img"></p><ul><li><strong>admin.py</strong>文件跟网站的后台管理站点配置相关。</li><li><strong>apps.py</strong>文件用于配置当前子应用的相关信息。</li><li><strong>migrations</strong>目录用于存放数据库迁移历史文件。</li><li><strong>models.py</strong>文件用户保存数据库模型类。</li><li><strong>tests.py</strong>文件用于开发测试用例，编写单元测试。</li><li><strong>views.py</strong>文件用于编写Web应用视图。</li></ul><ol start="3"><li><p>注册安装子应用</p><p>创建出来的子应用目录文件虽然被放到了工程项目目录中，但是django工程并不能立即直接使用该子应用，需要注册安装后才能使用。</p><p>在工程配置文件settings.py中，<strong>INSTALLED_APPS</strong>项保存了工程中已经注册安装的子应用，初始工程中的INSTALLED_APPS如下：</p><p><img src="https://s2.loli.net/2022/06/03/Uc4gCahGqxtz6He.png" alt="img"></p></li></ol><p>​<strong>注册安装一个子应用的方法，即是将子应用的配置信息文件apps.py中的Config类添加到INSTALLED_APPS列表中。</strong></p><p>​例如，将刚创建的book子应用添加到工程中，可在INSTALLED_APPS列表中添加**’book.apps.BookConfig’**。</p><p>​   <img src="https://s2.loli.net/2022/06/03/aq5PuDGJvpZUr29.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/061016107.html"/>
      <url>/2022/061016107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
