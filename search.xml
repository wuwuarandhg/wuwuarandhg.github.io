<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javascript的使用</title>
      <link href="/2022/061160379.html"/>
      <url>/2022/061160379.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-注册事件（绑定事件）"><a href="#1-注册事件（绑定事件）" class="headerlink" title="1. 注册事件（绑定事件）"></a>1. 注册事件（绑定事件）</h4><h5 id="1-addEventListener-事件监听方式"><a href="#1-addEventListener-事件监听方式" class="headerlink" title="1.addEventListener 事件监听方式"></a>1.addEventListener 事件监听方式</h5><p>eventTarget.addEventListener(type, listener[, useCapture])  </p><p>eventTarget.addEventListener()方法将指定的监听器注册到 eventTarget（目标对象）上，当该对象触发指定的事件时，就会执行事件处理函数。</p><p>该方法接收三个参数：</p><pre class=" language-tex"><code class="language-tex">type：事件类型字符串，比如 click 、mouseover ，注意这里不要带 onlistener：事件处理函数，事件发生时，会调用该监听函数useCapture：可选参数，是一个布尔值，默认是 false。学完 DOM 事件流后，我们再进一步学习</code></pre><h5 id="2-attachEvent-事件监听方式"><a href="#2-attachEvent-事件监听方式" class="headerlink" title="2.attachEvent 事件监听方式"></a>2.attachEvent 事件监听方式</h5><p>eventTarget.attachEvent(eventNameWithOn, callback) </p><p>eventTarget.attachEvent()方法将指定的监听器注册到 eventTarget（目标对象） 上，当该对象触发指定的事件时，指定的回调函数就会被执行。</p><p>该方法接收两个参数</p><pre class=" language-tex"><code class="language-tex">eventNameWithOn：事件类型字符串，比如 onclick 、onmouseover ，这里要带 oncallback： 事件处理函数，当目标触发事件时回调函数被调用注意：IE8 及早期版本支持</code></pre><h5 id="3-注册事件兼容性解决方案"><a href="#3-注册事件兼容性解决方案" class="headerlink" title="3.注册事件兼容性解决方案"></a>3.注册事件兼容性解决方案</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 判断当前浏览器是否支持 addEventListener 方法</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 第三个参数 默认是false</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 相当于 element.onclick = fn;</span>        element<span class="token punctuation">[</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><h4 id="2-删除事件（解绑事件）"><a href="#2-删除事件（解绑事件）" class="headerlink" title="2.删除事件（解绑事件）"></a>2.删除事件（解绑事件）</h4><h5 id="1-删除事件的方式"><a href="#1-删除事件的方式" class="headerlink" title="1.  删除事件的方式"></a>1.  删除事件的方式</h5><h6 id="1-传统注册方式"><a href="#1-传统注册方式" class="headerlink" title="1.传统注册方式"></a>1.传统注册方式</h6><p>eventTarget.onclick &#x3D; null;</p><h6 id="2-方法监听注册方式"><a href="#2-方法监听注册方式" class="headerlink" title="2.方法监听注册方式"></a>2.方法监听注册方式</h6><ol><li>eventTarget.removeEventListener(type, listener[, useCapture]);</li><li>eventTarget.detachEvent(eventNameWithOn, callback);</li></ol><h5 id="2-删除事件兼容性解决方案"><a href="#2-删除事件兼容性解决方案" class="headerlink" title="2.删除事件兼容性解决方案"></a>2.删除事件兼容性解决方案</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">removeEventListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 判断当前浏览器是否支持 removeEventListener 方法</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 第三个参数 默认是false</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>detachEvent<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        element<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        element<span class="token punctuation">[</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><h4 id="3-DOM-事件流"><a href="#3-DOM-事件流" class="headerlink" title="3.DOM 事件流"></a>3.DOM 事件流</h4><p>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即 DOM 事件流。<br><img src="https://s2.loli.net/2022/05/26/flOeoBR3QgHdF8j.png"></p><p>DOM 事件流分为3个阶段： </p><ol><li><p>捕获阶段</p></li><li><p>当前目标阶段</p></li><li><p>冒泡阶段</p></li></ol><p>事件冒泡： IE 最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点的过程。</p><p>事件捕获： 网景最早提出，由 DOM 最顶层节点开始，然后逐级向下传播到到最具体的元素接收的过程。 </p><p>我们向水里面扔一块石头，首先它会有一个下降的过程，这个过程就可以理解为从最顶层向事件发生的最具体元素（目标点）的捕获过程；之后会产生泡泡，会在最低点（ 最具体元素）之后漂浮到水面上，这个过程相当于事件冒泡</p><p><img src="https://s2.loli.net/2022/05/26/RPWlMtQFbC3eosN.png"></p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><pre class=" language-tex"><code class="language-tex">1.JS 代码中只能执行捕获或者冒泡其中的一个阶段。2.onclick 和 attachEvent 只能得到冒泡阶段。3.addEventListener(type, listener[, useCapture])第三个参数如果是 true，表示在事件捕获阶段调用事件处理程序；如果是 false（不写默认就是false），表示在事件冒泡阶段调用事件处理程序。4.实际开发中我们很少使用事件捕获，我们更关注事件冒泡。5.有些事件是没有冒泡的，比如 onblur、onfocus、onmouseenter、onmouseleave6.事件冒泡有时候会带来麻烦，有时候又会帮助很巧妙的做某些事件，我们后面讲解。</code></pre><h4 id="4-事件对象"><a href="#4-事件对象" class="headerlink" title="4.事件对象"></a>4.事件对象</h4><h5 id="1-什么是事件对象"><a href="#1-什么是事件对象" class="headerlink" title="1.什么是事件对象"></a>1.什么是事件对象</h5><pre class=" language-javascript"><code class="language-javascript">eventTarget<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   eventTarget<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>）  <span class="token comment" spellcheck="true">//</span></code></pre><p>官方解释：event 对象代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态。简单理解：事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象 event，它有很多属性和方法。</p><p>比如:1. 谁绑定了这个事件。</p><ol start="2"><li>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置。</li><li>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键。</li></ol><h5 id="2-事件对象的使用语法"><a href="#2-事件对象的使用语法" class="headerlink" title="2. 事件对象的使用语法"></a>2. 事件对象的使用语法</h5><pre class=" language-javascript"><code class="language-javascript">eventTarget<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt </span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   eventTarget<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt </span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>）</code></pre><p>这个 event  是个形参，系统帮我们设定为事件对象，不需要传递实参过去。当我们注册事件时， event 对象就会被系统自动创建，并依次传递给事件监听器（事件处理函数）。</p><h5 id="3-事件对象的兼容性方案"><a href="#3-事件对象的兼容性方案" class="headerlink" title="3.事件对象的兼容性方案"></a>3.事件对象的兼容性方案</h5><p>事件对象本身的获取存在兼容问题：1. 标准浏览器中是浏览器给方法传递的参数，只需要定义形参 e 就可以获取到。2. 在 IE6~8 中，浏览器不会给方法传递参数，如果需要的话，需要到 window.event 中获取查找。</p><p>解决: e &#x3D; e || window.event;</p><h5 id="4-事件对象的常见属性和方法"><a href="#4-事件对象的常见属性和方法" class="headerlink" title="4.事件对象的常见属性和方法"></a>4.事件对象的常见属性和方法</h5><p>e.target 和 this 的区别：  this 是事件绑定的元素， 这个函数的调用者（绑定这个事件的元素） </p><p>  e.target 是事件触发的元素。</p><h5 id="5-事件对象的常见属性和方法"><a href="#5-事件对象的常见属性和方法" class="headerlink" title="5.事件对象的常见属性和方法"></a>5.事件对象的常见属性和方法</h5><p><img src="https://s2.loli.net/2022/05/26/bZEp2k7zVrXuaMc.png"></p><h4 id="5-阻止事件冒泡的两种方式"><a href="#5-阻止事件冒泡的两种方式" class="headerlink" title="5.阻止事件冒泡的两种方式"></a>5.阻止事件冒泡的两种方式</h4><p>事件冒泡：开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点。</p><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。</p><h5 id="1-阻止事件冒泡"><a href="#1-阻止事件冒泡" class="headerlink" title="1.阻止事件冒泡"></a>1.阻止事件冒泡</h5><ol><li>标准写法：利用事件对象里面的 stopPropagation()方法</li></ol><p> e.stopPropagation() </p><p> 2.非标准写法：IE 6-8  利用事件对象 cancelBubble 属性 </p><p> e.cancelBubble &#x3D; true;</p><h5 id="2-阻止事件冒泡的兼容性解决方案"><a href="#2-阻止事件冒泡的兼容性解决方案" class="headerlink" title="2.阻止事件冒泡的兼容性解决方案"></a>2.阻止事件冒泡的兼容性解决方案</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="6-事件委托（代理、委派）"><a href="#6-事件委托（代理、委派）" class="headerlink" title="6.事件委托（代理、委派）"></a>6.事件委托（代理、委派）</h4><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。生活中有如下场景：</p><p>咱们班有100个学生， 快递员有100个快递， 如果一个个的送花费时间较长。同时每个学生领取的时候，也需要排队领取，也花费时间较长，何如</p><p>解决方案：  快递员把100个快递，委托给班主任，班主任把这些快递放到办公室，同学们下课自行领取即可。</p><p>优势：  快递员省事，委托给班主任就可以走了。 同学们领取也方便，因为相信班主任。</p><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。程序中也有如此场景：</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，应该有弹框在手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，应该有弹框在手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，应该有弹框在手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，应该有弹框在手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，应该有弹框在手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>点击每个 li 都会弹出对话框，以前需要给每个 li 注册事件，是非常辛苦的，而且访问 DOM 的次数越多，这就会延长整个页面的交互就绪时间。</p><p><strong>事件委托</strong></p><p>事件委托也称为事件代理， 在 jQuery 里面称为事件委派。</p><p><strong>事件委托的原理</strong></p><p>不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点。以上案例：给 ul 注册点击事件，然后利用事件对象的 target 来找到当前点击的 li，因为点击 li，事件会冒泡到 ul 上， ul 有注册事件，就会触发事件监听器。</p><p><strong>事件委托的作用</strong></p><p>我们只操作了一次 DOM ，提高了程序的性能。</p><h4 id="7-常用的鼠标事件"><a href="#7-常用的鼠标事件" class="headerlink" title="7.常用的鼠标事件"></a>7.常用的鼠标事件</h4><p><img src="https://s2.loli.net/2022/05/26/Hk13oDrcFNO8uMX.png"></p><p>1.禁止鼠标右键菜单contextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</p><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'contextmenu'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>2..禁止鼠标选中（selectstart 开始选中）</p><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'selectstart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h5 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="鼠标事件对象"></a>鼠标事件对象</h5><p>event对象代表事件的状态，跟事件相关的一系列信息的集合。现阶段我们主要是用鼠标事件对象 MouseEvent 和键盘事件对象 KeyboardEvent。</p><p><img src="https://s2.loli.net/2022/05/26/otUR5hf3wEVAFlg.png"></p><h4 id="常用键盘事件"><a href="#常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h4><p>事件除了使用鼠标触发，还可以使用键盘触发。</p><p><img src="https://s2.loli.net/2022/05/26/g6USVQJl5qsxXTK.png"></p><p>注意： 1.  如果使用addEventListener 不需要加</p><ol start="2"><li>ononkeypress 和前面2个的区别是，它不识别功能键，比如左右箭头，shift 等。</li></ol><p>3.三个事件的执行顺序是： keydown –  keypress  — keyup</p><h5 id="键盘事件对象"><a href="#键盘事件对象" class="headerlink" title="键盘事件对象"></a>键盘事件对象</h5><p><img src="https://s2.loli.net/2022/05/26/nkD3ZpKNFHfOXPB.png"></p><p>注意：  onkeydown 和 onkeyup  不区分字母大小写，onkeypress 区分字母大小写。在我们实际开发中，我们更多的使用keydown和keyup， 它能识别所有的键（包括功能键）Keypress 不识别功能键，但是keyCode属性能区分大小写，返回不同的ASCII值</p><h5 id="ASCII-表"><a href="#ASCII-表" class="headerlink" title="ASCII 表"></a>ASCII 表</h5><p><img src="https://s2.loli.net/2022/05/26/ZtkqmWRdbwAxKHY.png"></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django第三天</title>
      <link href="/2022/061060844.html"/>
      <url>/2022/061060844.html</url>
      
        <content type="html"><![CDATA[<h2 id="Django第三天"><a href="#Django第三天" class="headerlink" title="Django第三天"></a>Django第三天</h2><h3 id="Django的站点"><a href="#Django的站点" class="headerlink" title="Django的站点"></a>Django的站点</h3><ul><li><p><strong>站点</strong>: 分为内容发布和公共访问两部分</p></li><li><p><strong>内容发布</strong>的部分由网站的管理员负责查看、添加、修改、删除数据</p></li><li><p><code>Django</code>能够根据定义的模型类自动地生成管理模块</p></li><li><p>使用</p><p>Django的管理模块, 需要按照如下步骤操作 :</p><ul><li>1.管理界面本地化</li></ul></li><li><p>2.创建管理员</p><ul><li>3.注册模型类</li></ul></li><li><p>4.发布内容到数据库</p></li></ul><h4 id="1-管理界面本地化"><a href="#1-管理界面本地化" class="headerlink" title="1 . 管理界面本地化"></a>1 . 管理界面本地化</h4><ul><li>本地化是将显示的语言、时间等使用本地的习惯，这里的本地化就是进行中国化.</li><li>中国大陆地区使用<code>简体中文</code>, 时区使用<code>亚洲/上海时区</code>, 注意这里不使用北京时区.</li><li>本地化前</li></ul><p><img src="https://s2.loli.net/2022/06/03/hgLFEWBicodCvKl.png" alt="img"></p><ul><li><p>本地化后</p><p><img src="https://s2.loli.net/2022/06/03/vyIJsl2E4Qt5xnc.png" alt="img"></p></li></ul><h4 id="2-创建管理员"><a href="#2-创建管理员" class="headerlink" title="2 . 创建管理员"></a>2 . 创建管理员</h4><ol><li><p>创建管理员的命令 :</p><pre class=" language-python"><code class="language-python">python manage<span class="token punctuation">.</span>py createsuperuser</code></pre></li><li><p>按提示输入用户名、邮箱、密码</p><p><img src="https://s2.loli.net/2022/06/03/BgzstbfiIo2jrEN.png" alt="img"></p></li><li><p>重置密码</p><pre class=" language-python"><code class="language-python">python manager<span class="token punctuation">.</span>py changepassword 用户名</code></pre></li><li><p>登陆站点 :<code>http://127.0.0.1:8000/admin</code></p><p>需要服务器是启动状态</p><p><img src="https://s2.loli.net/2022/06/03/Gc12RUhjEd6lwFW.png" alt="img"></p></li></ol><h4 id="3-注册模型类"><a href="#3-注册模型类" class="headerlink" title="3.注册模型类"></a>3.注册模型类</h4><p>   在<code>应用</code>的<code>admin.py</code>文件中注册模型类</p><ul><li>需要导入模型模块 :<code>from book.models import BookInfo,PeopleInfo</code></li></ul><p>   <img src="https://s2.loli.net/2022/06/03/uS6QZMYiLsNTDCv.png" alt="img"></p><p>   <strong>注册模型成功后, 就可以在站点管理界面方便快速的管理数据.</strong></p><h4 id="4-发布内容到数据库"><a href="#4-发布内容到数据库" class="headerlink" title="4.发布内容到数据库"></a>4.发布内容到数据库</h4><p><img src="https://s2.loli.net/2022/06/03/kEmeILMaGDO7rtQ.gif" alt="img"></p><ul><li>发布内容后，优化模型类展示</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 准备书籍列表信息的模型类</span><span class="token keyword">class</span> <span class="token class-name">BookInfo</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建字段，字段类型...</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""将模型类以字符串的方式输出"""</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name</code></pre><p><img src="https://s2.loli.net/2022/06/03/9FjULvonzdeHpr3.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django第一天</title>
      <link href="/2022/061029103.html"/>
      <url>/2022/061029103.html</url>
      
        <content type="html"><![CDATA[<h1 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h1><h2 id="Django的使用"><a href="#Django的使用" class="headerlink" title="Django的使用"></a>Django的使用</h2><h3 id="1-MVT流程-掌握M-V-T的每个模块的功能-了解MVT的流程"><a href="#1-MVT流程-掌握M-V-T的每个模块的功能-了解MVT的流程" class="headerlink" title="1.MVT流程:掌握M,V,T的每个模块的功能,了解MVT的流程"></a>1.MVT流程:掌握M,V,T的每个模块的功能,了解MVT的流程</h3><img src="https://s2.loli.net/2022/05/30/Pr5eL4XWuD279JK.png#pic_center=" alt="image-20220530225441259" style="zoom:75%;" /><h3 id="2-创建Django项目和应用"><a href="#2-创建Django项目和应用" class="headerlink" title="2.创建Django项目和应用"></a>2.创建Django项目和应用</h3><h4 id="1-创建Django项目"><a href="#1-创建Django项目" class="headerlink" title="1.创建Django项目"></a>1.创建Django项目</h4><pre class=" language-tex"><code class="language-tex">django-admin startproject name    </code></pre><p>1.例如：想要在桌面的code目录中创建一个名为bookmanager的项目工程，可执行如下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> ~/Desktop/Codedjango-admin startproject bookmanager</code></pre><p>执行后，会多出一个新目录名为bookmanager，此即为新创建的工程目录。</p><ol start="2"><li>工程目录说明</li></ol><p><img src="https://s2.loli.net/2022/05/30/jrf1MtiqlxepTws.png" alt="img"></p><pre class=" language-tex"><code class="language-tex">与项目同名的目录，此处为bookmanager。settings.py是项目的整体配置文件。urls.py是项目的URL配置文件。wsgi.py是项目与WSGI兼容的Web服务器入口。manage.py是项目管理文件，通过它管理项目。</code></pre><ol start="3"><li>运行开发服务器</li></ol><p>​在开发阶段，为了能够快速预览到开发的效果，django提供了一个纯python编写的轻量级web服务器，仅在开发阶段使用。</p><p>​运行服务器命令如下：</p><pre class=" language-python"><code class="language-python">python manage<span class="token punctuation">.</span>py runserver ip<span class="token punctuation">:</span>端口或：python manage<span class="token punctuation">.</span>py runserver</code></pre><p>​<strong>可以不写IP和端口，默认IP是127.0.0.1，默认端口为8000</strong>。</p><p>​启动后可见如下信息：</p><p>​<img src="https://s2.loli.net/2022/05/30/sdpwLn2WCtzlVac.png" alt="img"></p><p>在浏览器中输入网址“127.0.0.1:8000”便可看到效果。</p><p><img src="https://s2.loli.net/2022/05/30/A36jc8eRpbFznMf.png" alt="img"></p><ul><li>django默认工作在调式Debug模式下，如果增加、修改、删除文件，服务器会自动重启。</li><li>按ctrl+c停止服务器。</li></ul><p>####2.创建当前Django子的应用</p><pre class=" language-tex"><code class="language-tex">python manage.py startapp name  //</code></pre><ol><li><strong>manage.py</strong>为上述创建工程时自动生成的管理文件。</li></ol><p>例如，在刚才创建的bookmanager工程中，想要创建一个用户book子应用模块，可执行：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> ~/Desktop/code/bookpython manage.py startapp book</code></pre><p>执行后，可以看到工程目录中多出了一个名为book的子目录。</p><p>2.子应用目录说明</p><p>查看此时的工程目录，结构如下：</p><p><img src="https://s2.loli.net/2022/05/30/JX6vBKbgqaQSmej.png" alt="img"></p><ul><li><strong>admin.py</strong>文件跟网站的后台管理站点配置相关。</li><li><strong>apps.py</strong>文件用于配置当前子应用的相关信息。</li><li><strong>migrations</strong>目录用于存放数据库迁移历史文件。</li><li><strong>models.py</strong>文件用户保存数据库模型类。</li><li><strong>tests.py</strong>文件用于开发测试用例，编写单元测试。</li><li><strong>views.py</strong>文件用于编写Web应用视图。</li></ul><ol start="3"><li><p>注册安装子应用</p><p>创建出来的子应用目录文件虽然被放到了工程项目目录中，但是django工程并不能立即直接使用该子应用，需要注册安装后才能使用。</p><p>在工程配置文件settings.py中，<strong>INSTALLED_APPS</strong>项保存了工程中已经注册安装的子应用，初始工程中的INSTALLED_APPS如下：</p><p><img src="https://s2.loli.net/2022/06/03/Uc4gCahGqxtz6He.png" alt="img"></p></li></ol><p>​<strong>注册安装一个子应用的方法，即是将子应用的配置信息文件apps.py中的Config类添加到INSTALLED_APPS列表中。</strong></p><p>​例如，将刚创建的book子应用添加到工程中，可在INSTALLED_APPS列表中添加**’book.apps.BookConfig’**。</p><p>​   <img src="https://s2.loli.net/2022/06/03/aq5PuDGJvpZUr29.png"></p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/061016107.html"/>
      <url>/2022/061016107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
